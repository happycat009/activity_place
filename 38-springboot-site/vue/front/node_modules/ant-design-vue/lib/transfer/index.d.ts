import type { CSSProperties, ExtractPropTypes, PropType } from 'vue';
import type { VueNode } from '../_util/type';
import type { TransferListBodyProps } from './ListBody';
import type { PaginationType } from './interface';
export type { TransferListProps } from './list';
export type { TransferOperationProps } from './operation';
export type { TransferSearchProps } from './search';
export declare type TransferDirection = 'left' | 'right';
export interface RenderResultObject {
    label: VueNode;
    value: string;
}
export declare type RenderResult = VueNode | RenderResultObject | string | null;
export interface TransferItem {
    key?: string;
    title?: string;
    description?: string;
    disabled?: boolean;
    [name: string]: any;
}
export declare type KeyWise<T> = T & {
    key: string;
};
export declare type KeyWiseTransferItem = KeyWise<TransferItem>;
declare type TransferRender<RecordType> = (item: RecordType) => RenderResult;
export interface ListStyle {
    direction: TransferDirection;
}
export declare type SelectAllLabel = VueNode | ((info: {
    selectedCount: number;
    totalCount: number;
}) => VueNode);
export interface TransferLocale {
    titles: VueNode[];
    notFoundContent?: VueNode;
    searchPlaceholder: string;
    itemUnit: string;
    itemsUnit: string;
    remove: string;
    selectAll: string;
    selectCurrent: string;
    selectInvert: string;
    removeAll: string;
    removeCurrent: string;
}
export declare const transferProps: {
    id: StringConstructor;
    prefixCls: StringConstructor;
    dataSource: {
        type: PropType<TransferItem[]>;
        default: any[];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    targetKeys: {
        type: PropType<string[]>;
        default: any;
    };
    selectedKeys: {
        type: PropType<string[]>;
        default: any;
    };
    render: {
        type: PropType<TransferRender<TransferItem>>;
    };
    listStyle: {
        type: PropType<CSSProperties | ((style: ListStyle) => CSSProperties)>;
        default: () => {};
    };
    operationStyle: import("vue-types").VueTypeValidableDef<CSSProperties>;
    titles: {
        type: PropType<string[]>;
    };
    operations: {
        type: PropType<string[]>;
    };
    showSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    filterOption: {
        type: PropType<(inputValue: string, item: TransferItem) => boolean>;
    };
    searchPlaceholder: StringConstructor;
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    locale: {
        type: PropType<Partial<TransferLocale>>;
        default: () => {};
    };
    rowKey: {
        type: PropType<(record: TransferItem) => string>;
    };
    showSelectAll: {
        type: BooleanConstructor;
        default: any;
    };
    selectAllLabels: {
        type: PropType<SelectAllLabel[]>;
    };
    children: {
        type: PropType<(props: TransferListBodyProps) => VueNode>;
    };
    oneWay: {
        type: BooleanConstructor;
        default: any;
    };
    pagination: {
        type: PropType<PaginationType>;
        default: any;
    };
};
export declare type TransferProps = Partial<ExtractPropTypes<typeof transferProps>>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            listStyle: {};
            disabled: boolean;
            locale: {};
            selectedKeys: string[];
            showSearch: boolean;
            pagination: any;
            dataSource: TransferItem[];
            showSelectAll: boolean;
            oneWay: boolean;
            targetKeys: string[];
        }> & Omit<Readonly<{
            id?: unknown;
            prefixCls?: unknown;
            dataSource?: unknown;
            disabled?: unknown;
            targetKeys?: unknown;
            selectedKeys?: unknown;
            render?: unknown;
            listStyle?: unknown;
            operationStyle?: unknown;
            titles?: unknown;
            operations?: unknown;
            showSearch?: unknown;
            filterOption?: unknown;
            searchPlaceholder?: unknown;
            notFoundContent?: unknown;
            locale?: unknown;
            rowKey?: unknown;
            showSelectAll?: unknown;
            selectAllLabels?: unknown;
            children?: unknown;
            oneWay?: unknown;
            pagination?: unknown;
        } & {
            listStyle: {};
            locale: {};
            showSearch: boolean;
            dataSource: TransferItem[];
        } & {
            prefixCls?: string;
            disabled?: boolean;
            render?: TransferRender<TransferItem>;
            id?: string;
            children?: (props: Partial<{
                prefixCls?: unknown;
                filteredRenderItems?: unknown;
                selectedKeys?: unknown;
                disabled?: unknown;
                showRemove?: unknown;
                pagination?: unknown;
                onItemSelect?: unknown;
                onScroll?: unknown;
                onItemRemove?: unknown;
            } & {
                prefixCls: string;
                selectedKeys: unknown[];
                filteredRenderItems: unknown[];
            } & {
                onScroll?: (...args: any[]) => any;
                disabled?: boolean;
                showRemove?: boolean;
                pagination?: any;
                onItemSelect?: (...args: any[]) => any;
                onItemRemove?: (...args: any[]) => any;
            }>) => VueNode;
            selectedKeys?: string[];
            titles?: string[];
            notFoundContent?: any;
            searchPlaceholder?: string;
            filterOption?: (inputValue: string, item: TransferItem) => boolean;
            pagination?: any;
            showSelectAll?: boolean;
            oneWay?: boolean;
            targetKeys?: string[];
            operationStyle?: CSSProperties;
            operations?: string[];
            rowKey?: (record: TransferItem) => string;
            selectAllLabels?: SelectAllLabel[];
        }> & {
            onChange?: (...args: any[]) => any;
            onScroll?: (...args: any[]) => any;
            "onUpdate:selectedKeys"?: (...args: any[]) => any;
            onSearch?: (...args: any[]) => any;
            "onUpdate:targetKeys"?: (...args: any[]) => any;
            onSelectChange?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "listStyle" | "disabled" | "locale" | "selectedKeys" | "showSearch" | "pagination" | "dataSource" | "showSelectAll" | "oneWay" | "targetKeys">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "scroll" | "search" | "change" | "update:selectedKeys" | "update:targetKeys" | "selectChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            id?: unknown;
            prefixCls?: unknown;
            dataSource?: unknown;
            disabled?: unknown;
            targetKeys?: unknown;
            selectedKeys?: unknown;
            render?: unknown;
            listStyle?: unknown;
            operationStyle?: unknown;
            titles?: unknown;
            operations?: unknown;
            showSearch?: unknown;
            filterOption?: unknown;
            searchPlaceholder?: unknown;
            notFoundContent?: unknown;
            locale?: unknown;
            rowKey?: unknown;
            showSelectAll?: unknown;
            selectAllLabels?: unknown;
            children?: unknown;
            oneWay?: unknown;
            pagination?: unknown;
        } & {
            listStyle: {};
            locale: {};
            showSearch: boolean;
            dataSource: TransferItem[];
        } & {
            prefixCls?: string;
            disabled?: boolean;
            render?: TransferRender<TransferItem>;
            id?: string;
            children?: (props: Partial<{
                prefixCls?: unknown;
                filteredRenderItems?: unknown;
                selectedKeys?: unknown;
                disabled?: unknown;
                showRemove?: unknown;
                pagination?: unknown;
                onItemSelect?: unknown;
                onScroll?: unknown;
                onItemRemove?: unknown;
            } & {
                prefixCls: string;
                selectedKeys: unknown[];
                filteredRenderItems: unknown[];
            } & {
                onScroll?: (...args: any[]) => any;
                disabled?: boolean;
                showRemove?: boolean;
                pagination?: any;
                onItemSelect?: (...args: any[]) => any;
                onItemRemove?: (...args: any[]) => any;
            }>) => VueNode;
            selectedKeys?: string[];
            titles?: string[];
            notFoundContent?: any;
            searchPlaceholder?: string;
            filterOption?: (inputValue: string, item: TransferItem) => boolean;
            pagination?: any;
            showSelectAll?: boolean;
            oneWay?: boolean;
            targetKeys?: string[];
            operationStyle?: CSSProperties;
            operations?: string[];
            rowKey?: (record: TransferItem) => string;
            selectAllLabels?: SelectAllLabel[];
        }> & {
            onChange?: (...args: any[]) => any;
            onScroll?: (...args: any[]) => any;
            "onUpdate:selectedKeys"?: (...args: any[]) => any;
            onSearch?: (...args: any[]) => any;
            "onUpdate:targetKeys"?: (...args: any[]) => any;
            onSelectChange?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "search" | "change" | "update:selectedKeys" | "update:targetKeys" | "selectChange")[], string, {
            listStyle: {};
            disabled: boolean;
            locale: {};
            selectedKeys: string[];
            showSearch: boolean;
            pagination: any;
            dataSource: TransferItem[];
            showSelectAll: boolean;
            oneWay: boolean;
            targetKeys: string[];
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        id?: unknown;
        prefixCls?: unknown;
        dataSource?: unknown;
        disabled?: unknown;
        targetKeys?: unknown;
        selectedKeys?: unknown;
        render?: unknown;
        listStyle?: unknown;
        operationStyle?: unknown;
        titles?: unknown;
        operations?: unknown;
        showSearch?: unknown;
        filterOption?: unknown;
        searchPlaceholder?: unknown;
        notFoundContent?: unknown;
        locale?: unknown;
        rowKey?: unknown;
        showSelectAll?: unknown;
        selectAllLabels?: unknown;
        children?: unknown;
        oneWay?: unknown;
        pagination?: unknown;
    } & {
        listStyle: {};
        locale: {};
        showSearch: boolean;
        dataSource: TransferItem[];
    } & {
        prefixCls?: string;
        disabled?: boolean;
        render?: TransferRender<TransferItem>;
        id?: string;
        children?: (props: Partial<{
            prefixCls?: unknown;
            filteredRenderItems?: unknown;
            selectedKeys?: unknown;
            disabled?: unknown;
            showRemove?: unknown;
            pagination?: unknown;
            onItemSelect?: unknown;
            onScroll?: unknown;
            onItemRemove?: unknown;
        } & {
            prefixCls: string;
            selectedKeys: unknown[];
            filteredRenderItems: unknown[];
        } & {
            onScroll?: (...args: any[]) => any;
            disabled?: boolean;
            showRemove?: boolean;
            pagination?: any;
            onItemSelect?: (...args: any[]) => any;
            onItemRemove?: (...args: any[]) => any;
        }>) => VueNode;
        selectedKeys?: string[];
        titles?: string[];
        notFoundContent?: any;
        searchPlaceholder?: string;
        filterOption?: (inputValue: string, item: TransferItem) => boolean;
        pagination?: any;
        showSelectAll?: boolean;
        oneWay?: boolean;
        targetKeys?: string[];
        operationStyle?: CSSProperties;
        operations?: string[];
        rowKey?: (record: TransferItem) => string;
        selectAllLabels?: SelectAllLabel[];
    }> & {
        onChange?: (...args: any[]) => any;
        onScroll?: (...args: any[]) => any;
        "onUpdate:selectedKeys"?: (...args: any[]) => any;
        onSearch?: (...args: any[]) => any;
        "onUpdate:targetKeys"?: (...args: any[]) => any;
        onSelectChange?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    id?: unknown;
    prefixCls?: unknown;
    dataSource?: unknown;
    disabled?: unknown;
    targetKeys?: unknown;
    selectedKeys?: unknown;
    render?: unknown;
    listStyle?: unknown;
    operationStyle?: unknown;
    titles?: unknown;
    operations?: unknown;
    showSearch?: unknown;
    filterOption?: unknown;
    searchPlaceholder?: unknown;
    notFoundContent?: unknown;
    locale?: unknown;
    rowKey?: unknown;
    showSelectAll?: unknown;
    selectAllLabels?: unknown;
    children?: unknown;
    oneWay?: unknown;
    pagination?: unknown;
} & {
    listStyle: {};
    locale: {};
    showSearch: boolean;
    dataSource: TransferItem[];
} & {
    prefixCls?: string;
    disabled?: boolean;
    render?: TransferRender<TransferItem>;
    id?: string;
    children?: (props: Partial<{
        prefixCls?: unknown;
        filteredRenderItems?: unknown;
        selectedKeys?: unknown;
        disabled?: unknown;
        showRemove?: unknown;
        pagination?: unknown;
        onItemSelect?: unknown;
        onScroll?: unknown;
        onItemRemove?: unknown;
    } & {
        prefixCls: string;
        selectedKeys: unknown[];
        filteredRenderItems: unknown[];
    } & {
        onScroll?: (...args: any[]) => any;
        disabled?: boolean;
        showRemove?: boolean;
        pagination?: any;
        onItemSelect?: (...args: any[]) => any;
        onItemRemove?: (...args: any[]) => any;
    }>) => VueNode;
    selectedKeys?: string[];
    titles?: string[];
    notFoundContent?: any;
    searchPlaceholder?: string;
    filterOption?: (inputValue: string, item: TransferItem) => boolean;
    pagination?: any;
    showSelectAll?: boolean;
    oneWay?: boolean;
    targetKeys?: string[];
    operationStyle?: CSSProperties;
    operations?: string[];
    rowKey?: (record: TransferItem) => string;
    selectAllLabels?: SelectAllLabel[];
}> & {
    onChange?: (...args: any[]) => any;
    onScroll?: (...args: any[]) => any;
    "onUpdate:selectedKeys"?: (...args: any[]) => any;
    onSearch?: (...args: any[]) => any;
    "onUpdate:targetKeys"?: (...args: any[]) => any;
    onSelectChange?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "search" | "change" | "update:selectedKeys" | "update:targetKeys" | "selectChange")[], "search" | "scroll" | "change" | "update:selectedKeys" | "update:targetKeys" | "selectChange", {
    listStyle: {};
    disabled: boolean;
    locale: {};
    selectedKeys: string[];
    showSearch: boolean;
    pagination: any;
    dataSource: TransferItem[];
    showSelectAll: boolean;
    oneWay: boolean;
    targetKeys: string[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
