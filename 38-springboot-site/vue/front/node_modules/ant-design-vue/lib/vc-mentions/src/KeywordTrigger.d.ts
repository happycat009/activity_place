import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    options: {
        type: PropType<Partial<{
            value?: unknown;
            disabled?: unknown;
            label?: unknown;
        } & {
            disabled: boolean;
        } & {
            label?: string | number | Function;
            value?: string;
        }>[]>;
        default: () => any[];
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    direction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    loading?: unknown;
    options?: unknown;
    prefixCls?: unknown;
    placement?: unknown;
    visible?: unknown;
    transitionName?: unknown;
    getPopupContainer?: unknown;
    direction?: unknown;
} & {
    prefixCls: string;
    direction: string;
    transitionName: string;
    options: Partial<{
        value?: unknown;
        disabled?: unknown;
        label?: unknown;
    } & {
        disabled: boolean;
    } & {
        label?: string | number | Function;
        value?: string;
    }>[];
    placement: string;
} & {
    visible?: boolean;
    loading?: boolean;
    getPopupContainer?: (...args: any[]) => any;
}>, {
    prefixCls: string;
    direction: string;
    getPopupContainer: (...args: any[]) => any;
    transitionName: string;
    options: Partial<{
        value?: unknown;
        disabled?: unknown;
        label?: unknown;
    } & {
        disabled: boolean;
    } & {
        label?: string | number | Function;
        value?: string;
    }>[];
    placement: string;
}>;
export default _default;
