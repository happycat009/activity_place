import type { UploadFile } from './interface';
declare const _default: import("vue").DefineComponent<{
    type: import("vue-types").VueTypeDef<"select" | "drag">;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultFileList: {
        type: import("vue").PropType<UploadFile<any>[]>;
    };
    fileList: {
        type: import("vue").PropType<UploadFile<any>[]>;
    };
    action: import("vue-types").VueTypeDef<any>;
    directory: import("vue-types").VueTypeValidableDef<boolean>;
    data: import("vue-types").VueTypeDef<any>;
    method: import("vue-types").VueTypeDef<"post" | "POST" | "PUT" | "PATCH" | "put" | "patch">;
    headers: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    showUploadList: import("vue-types").VueTypeDef<boolean | {
        showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    }>;
    multiple: import("vue-types").VueTypeValidableDef<boolean>;
    accept: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    beforeUpload: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    listType: import("vue-types").VueTypeDef<"picture" | "text" | "picture-card">;
    remove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    supportServerRender: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    customRequest: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    withCredentials: import("vue-types").VueTypeValidableDef<boolean>;
    openFileDialogOnClick: import("vue-types").VueTypeValidableDef<boolean>;
    locale: {
        type: import("vue").PropType<import("./interface").UploadLocale>;
    };
    height: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    previewFile: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transformFile: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: {
        type: import("vue").PropType<(info: import("./interface").UploadChangeParam<UploadFile<any>>) => void>;
    };
    onPreview: {
        type: import("vue").PropType<(file: UploadFile<any>) => void>;
    };
    onRemove: {
        type: import("vue").PropType<(file: UploadFile<any>) => boolean | void | Promise<boolean | void>>;
    };
    onDownload: {
        type: import("vue").PropType<(file: UploadFile<any>) => void>;
    };
    'onUpdate:fileList': {
        type: import("vue").PropType<(files: UploadFile<any>[]) => void>;
    };
}, {
    upload: any;
    progressTimer: any;
    configProvider: {
        getTargetContainer?: () => HTMLElement;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        prefixCls?: string;
        getPrefixCls?: (suffixCls?: string, customizePrefixCls?: string) => string;
        renderEmpty?: typeof import("../config-provider/renderEmpty").default;
        transformCellText?: (tableProps: import("../table/interface").TransformCellTextProps) => any;
        csp?: unknown;
        input?: {
            autocomplete: string;
        };
        autoInsertSpaceInButton?: boolean;
        locale?: {
            locale: string;
            Pagination?: any;
            Table?: {
                filterTitle?: string;
                filterConfirm?: any;
                filterReset?: any;
                filterEmptyText?: any;
                emptyText?: any;
                selectAll?: any;
                selectNone?: any;
                selectInvert?: any;
                selectionAll?: any;
                sortTitle?: string;
                expand?: string;
                collapse?: string;
                triggerDesc?: string;
                triggerAsc?: string;
                cancelSort?: string;
            };
            Popconfirm?: {
                [x: string]: any;
            };
            Upload?: {
                [x: string]: any;
            };
            Form?: {
                optional?: string;
                defaultValidateMessages: {
                    default?: string | (() => string);
                    required?: string | (() => string);
                    enum?: string | (() => string);
                    whitespace?: string | (() => string);
                    date?: {
                        format?: string | (() => string);
                        parse?: string | (() => string);
                        invalid?: string | (() => string);
                    };
                    types?: {
                        string?: string | (() => string);
                        method?: string | (() => string);
                        array?: string | (() => string);
                        object?: string | (() => string);
                        number?: string | (() => string);
                        date?: string | (() => string);
                        boolean?: string | (() => string);
                        integer?: string | (() => string);
                        float?: string | (() => string);
                        regexp?: string | (() => string);
                        email?: string | (() => string);
                        url?: string | (() => string);
                        hex?: string | (() => string);
                    };
                    string?: {
                        len?: string | (() => string);
                        min?: string | (() => string);
                        max?: string | (() => string);
                        range?: string | (() => string);
                    };
                    number?: {
                        len?: string | (() => string);
                        min?: string | (() => string);
                        max?: string | (() => string);
                        range?: string | (() => string);
                    };
                    array?: {
                        len?: string | (() => string);
                        min?: string | (() => string);
                        max?: string | (() => string);
                        range?: string | (() => string);
                    };
                    pattern?: {
                        mismatch?: string | (() => string);
                    };
                };
            };
            Image?: {
                preview: string;
            };
            DatePicker?: {
                lang: {
                    locale: string;
                    monthBeforeYear?: boolean;
                    yearFormat: string;
                    monthFormat?: string;
                    quarterFormat?: string;
                    today: string;
                    now: string;
                    backToToday: string;
                    ok: string;
                    timeSelect: string;
                    dateSelect: string;
                    weekSelect?: string;
                    clear: string;
                    month: string;
                    year: string;
                    previousMonth: string;
                    nextMonth: string;
                    monthSelect: string;
                    yearSelect: string;
                    decadeSelect: string;
                    dayFormat: string;
                    dateFormat: string;
                    dateTimeFormat: string;
                    previousYear: string;
                    nextYear: string;
                    previousDecade: string;
                    nextDecade: string;
                    previousCentury: string;
                    nextCentury: string;
                    shortWeekDays?: string[];
                    shortMonths?: string[];
                    placeholder: string;
                    yearPlaceholder?: string;
                    quarterPlaceholder?: string;
                    monthPlaceholder?: string;
                    weekPlaceholder?: string;
                    rangeYearPlaceholder?: [string, string];
                    rangeMonthPlaceholder?: [string, string];
                    rangeWeekPlaceholder?: [string, string];
                    rangePlaceholder?: [string, string];
                };
                timePickerLocale: {
                    placeholder?: string;
                    rangePlaceholder?: [string, string];
                };
                dateFormat?: string;
                dateTimeFormat?: string;
                weekFormat?: string;
                monthFormat?: string;
            };
            TimePicker?: {
                [x: string]: any;
            };
            Calendar?: {
                [x: string]: any;
            };
            Modal?: {
                okText: string;
                cancelText: string;
                justOkText: string;
            };
            Transfer?: {
                titles?: ((string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) | JSX.Element | (string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>)[])[];
                notFoundContent?: (string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) | JSX.Element | (string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>)[];
                searchPlaceholder?: string;
                itemUnit?: string;
                itemsUnit?: string;
                remove?: string;
                selectAll?: string;
                selectCurrent?: string;
                selectInvert?: string;
                removeAll?: string;
                removeCurrent?: string;
            };
            Select?: {
                [x: string]: any;
            };
            Empty?: {
                description: string;
            };
            global?: {
                [x: string]: any;
            };
            PageHeader?: {
                back: string;
            };
            Icon?: {
                [x: string]: any;
            };
            Text?: {
                [x: string]: any;
            };
        };
        pageHeader?: {
            ghost: boolean;
        };
        componentSize?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        space?: {
            size: number | import("../config-provider").SizeType;
        };
        virtual?: boolean;
        dropdownMatchSelectWidth?: number | boolean;
        form?: unknown;
        notUpdateGlobalConfig?: boolean;
    };
    formItemContext: import("../form/FormItemContext").FormItemContext;
}, {
    sFileList: UploadFile<any>[];
    dragState: string;
}, {}, {
    onStart(file: any): void;
    onSuccess(response: any, file: any, xhr: any): void;
    onProgress(e: any, file: any): void;
    onError(error: any, response: any, file: any): void;
    onReject(fileList: any): void;
    handleRemove(file: any): void;
    handleManualRemove(file: any): void;
    handleChange(info: any): void;
    onFileDrop(e: any): void;
    reBeforeUpload(file: any, fileList: any): any;
    clearProgressTimer(): void;
    autoUpdateProgress(_: any, file: any): void;
    renderUploadList(locale: any): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    name?: unknown;
    defaultFileList?: unknown;
    fileList?: unknown;
    action?: unknown;
    directory?: unknown;
    data?: unknown;
    method?: unknown;
    headers?: unknown;
    showUploadList?: unknown;
    multiple?: unknown;
    accept?: unknown;
    beforeUpload?: unknown;
    listType?: unknown;
    remove?: unknown;
    supportServerRender?: unknown;
    disabled?: unknown;
    prefixCls?: unknown;
    customRequest?: unknown;
    withCredentials?: unknown;
    openFileDialogOnClick?: unknown;
    locale?: unknown;
    height?: unknown;
    id?: unknown;
    previewFile?: unknown;
    transformFile?: unknown;
    onChange?: unknown;
    onPreview?: unknown;
    onRemove?: unknown;
    onDownload?: unknown;
    'onUpdate:fileList'?: unknown;
} & {
    height: number;
    prefixCls: string;
    name: string;
    id: string;
    headers: {
        [key: string]: any;
    };
    accept: string;
} & {
    data?: any;
    onChange?: (info: import("./interface").UploadChangeParam<UploadFile<any>>) => void;
    multiple?: boolean;
    disabled?: boolean;
    locale?: unknown;
    onPreview?: (file: UploadFile<any>) => void;
    type?: "select" | "drag";
    method?: "post" | "POST" | "PUT" | "PATCH" | "put" | "patch";
    remove?: (...args: any[]) => any;
    action?: any;
    onRemove?: (file: UploadFile<any>) => boolean | void | Promise<boolean | void>;
    previewFile?: (...args: any[]) => any;
    defaultFileList?: UploadFile<any>[];
    fileList?: UploadFile<any>[];
    directory?: boolean;
    showUploadList?: boolean | {
        showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    };
    beforeUpload?: (...args: any[]) => any;
    listType?: "picture" | "text" | "picture-card";
    supportServerRender?: boolean;
    customRequest?: (...args: any[]) => any;
    withCredentials?: boolean;
    openFileDialogOnClick?: boolean;
    transformFile?: (...args: any[]) => any;
    onDownload?: (file: UploadFile<any>) => void;
    "onUpdate:fileList"?: (files: UploadFile<any>[]) => void;
}>, {
    height: number;
    prefixCls: string;
    name: string;
    remove: (...args: any[]) => any;
    id: string;
    previewFile: (...args: any[]) => any;
    headers: {
        [key: string]: any;
    };
    accept: string;
    beforeUpload: (...args: any[]) => any;
    customRequest: (...args: any[]) => any;
    transformFile: (...args: any[]) => any;
}>;
export default _default;
