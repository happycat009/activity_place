import type { Plugin } from 'vue';
import Group from './Group';
import Button from './RadioButton';
export type { RadioChangeEventTarget, RadioChangeEvent } from './interface';
export { Button, Group, Button as RadioButton, Group as RadioGroup };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            id: string;
        }> & Omit<Readonly<{
            prefixCls?: unknown;
            checked?: unknown;
            disabled?: unknown;
            isGroup?: unknown;
            value?: unknown;
            name?: unknown;
            id?: unknown;
            autofocus?: unknown;
            type?: unknown;
            onChange?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
        } & {
            prefixCls: string;
            name: string;
            type: string;
            id: string;
        } & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            disabled?: boolean;
            value?: any;
            checked?: boolean;
            autofocus?: boolean;
            isGroup?: boolean;
        }> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            "onUpdate:checked"?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onFocus" | "onBlur" | "onChange" | "prefixCls" | "name" | "type" | "id">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "focus" | "update:checked" | "update:value", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls?: unknown;
            checked?: unknown;
            disabled?: unknown;
            isGroup?: unknown;
            value?: unknown;
            name?: unknown;
            id?: unknown;
            autofocus?: unknown;
            type?: unknown;
            onChange?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
        } & {
            prefixCls: string;
            name: string;
            type: string;
            id: string;
        } & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            disabled?: boolean;
            value?: any;
            checked?: boolean;
            autofocus?: boolean;
            isGroup?: boolean;
        }> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            "onUpdate:checked"?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:checked" | "update:value")[], string, {
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            id: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls?: unknown;
        checked?: unknown;
        disabled?: unknown;
        isGroup?: unknown;
        value?: unknown;
        name?: unknown;
        id?: unknown;
        autofocus?: unknown;
        type?: unknown;
        onChange?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
    } & {
        prefixCls: string;
        name: string;
        type: string;
        id: string;
    } & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        disabled?: boolean;
        value?: any;
        checked?: boolean;
        autofocus?: boolean;
        isGroup?: boolean;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        "onUpdate:checked"?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls?: unknown;
    checked?: unknown;
    disabled?: unknown;
    isGroup?: unknown;
    value?: unknown;
    name?: unknown;
    id?: unknown;
    autofocus?: unknown;
    type?: unknown;
    onChange?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
} & {
    prefixCls: string;
    name: string;
    type: string;
    id: string;
} & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    disabled?: boolean;
    value?: any;
    checked?: boolean;
    autofocus?: boolean;
    isGroup?: boolean;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    "onUpdate:checked"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:checked" | "update:value")[], "blur" | "change" | "focus" | "update:checked" | "update:value", {
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    name: string;
    type: string;
    id: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Group: typeof Group;
    readonly Button: typeof Button;
};
export default _default;
