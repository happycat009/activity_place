import type { RawValueType, FlattenDataNode, Key, LabelValueType } from '../interface';
import type { SkipType } from './useKeyValueMapping';
import type { CheckedStrategy } from '../utils/strategyUtil';
import type { DefaultValueType } from '../../vc-select/interface/generator';
import type { DataEntity } from '../../vc-tree/interface';
import type { Ref } from 'vue';
interface Config {
    treeConduction: Ref<boolean>;
    /** Current `value` of TreeSelect */
    value: Ref<DefaultValueType>;
    showCheckedStrategy: Ref<CheckedStrategy>;
    conductKeyEntities: Ref<Record<Key, DataEntity>>;
    getEntityByKey: (key: Key, skipType?: SkipType, ignoreDisabledCheck?: boolean) => FlattenDataNode;
    getEntityByValue: (value: RawValueType, skipType?: SkipType, ignoreDisabledCheck?: boolean) => FlattenDataNode;
    getLabelProp: (entity: FlattenDataNode) => any;
}
/** Return  */
export default function useSelectValues(rawValues: Ref<RawValueType[]>, { value, getEntityByValue, getEntityByKey, treeConduction, showCheckedStrategy, conductKeyEntities, getLabelProp, }: Config): Ref<LabelValueType[]>;
export {};
