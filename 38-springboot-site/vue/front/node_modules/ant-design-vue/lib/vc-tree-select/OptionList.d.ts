import type { DataNode } from './interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    id: StringConstructor;
    options: {
        type: import("vue").PropType<DataNode[]>;
    };
    flattenOptions: {
        type: import("vue").PropType<import("./interface").FlattenDataNode[]>;
    };
    height: NumberConstructor;
    itemHeight: NumberConstructor;
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    values: {
        type: import("vue").PropType<Set<import("./interface").RawValueType>>;
    };
    multiple: {
        type: BooleanConstructor;
        default: any;
    };
    open: {
        type: BooleanConstructor;
        default: any;
    };
    defaultActiveFirstOption: {
        type: BooleanConstructor;
        default: any;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
    childrenAsData: {
        type: BooleanConstructor;
        default: any;
    };
    searchValue: StringConstructor;
    onSelect: {
        type: import("vue").PropType<(value: import("./interface").RawValueType, option: {
            selected: boolean;
        }) => void>;
    };
    onToggleOpen: {
        type: import("vue").PropType<(open?: boolean) => void>;
    };
    onActiveValue: {
        type: import("vue").PropType<(value: import("./interface").RawValueType, index: number) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    onMouseenter: {
        type: import("vue").PropType<() => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls?: unknown;
    id?: unknown;
    options?: unknown;
    flattenOptions?: unknown;
    height?: unknown;
    itemHeight?: unknown;
    virtual?: unknown;
    values?: unknown;
    multiple?: unknown;
    open?: unknown;
    defaultActiveFirstOption?: unknown;
    notFoundContent?: unknown;
    menuItemSelectedIcon?: unknown;
    childrenAsData?: unknown;
    searchValue?: unknown;
    onSelect?: unknown;
    onToggleOpen?: unknown;
    onActiveValue?: unknown;
    onScroll?: unknown;
    onMouseenter?: unknown;
} & {} & {
    height?: number;
    onMouseenter?: () => void;
    onSelect?: (value: import("./interface").RawValueType, option: {
        selected: boolean;
    }) => void;
    onScroll?: (e: UIEvent) => void;
    prefixCls?: string;
    open?: boolean;
    multiple?: boolean;
    values?: Set<import("./interface").RawValueType>;
    virtual?: boolean;
    id?: string;
    options?: DataNode[];
    notFoundContent?: any;
    itemHeight?: number;
    flattenOptions?: import("./interface").FlattenDataNode[];
    defaultActiveFirstOption?: boolean;
    menuItemSelectedIcon?: any;
    childrenAsData?: boolean;
    searchValue?: string;
    onToggleOpen?: (open?: boolean) => void;
    onActiveValue?: (value: import("./interface").RawValueType, index: number) => void;
}>, {
    open: boolean;
    multiple: boolean;
    virtual: boolean;
    defaultActiveFirstOption: boolean;
    childrenAsData: boolean;
}>;
export default _default;
