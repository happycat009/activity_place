declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    inputPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    action: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    visibilityToggle: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    iconRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultValue: import("vue-types").VueTypeDef<string | number>;
    value: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    placeholder: {
        type: import("vue").PropType<string | number>;
    };
    autocomplete: StringConstructor;
    type: {
        type: import("vue").PropType<"number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password">;
        default: string;
    };
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    size: {
        type: import("vue").PropType<import("../config-provider").SizeType>;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    readonly: import("vue-types").VueTypeValidableDef<boolean>;
    addonBefore: import("vue-types").VueTypeValidableDef<any>;
    addonAfter: import("vue-types").VueTypeValidableDef<any>;
    prefix: import("vue-types").VueTypeValidableDef<any>;
    suffix: import("vue-types").VueTypeValidableDef<any>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    allowClear: import("vue-types").VueTypeValidableDef<boolean>;
    lazy: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    maxlength: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    htmlSize: NumberConstructor;
    onPressEnter: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onKeydown: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onKeyup: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onFocus: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onBlur: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onInput: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:value': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    valueModifiers: ObjectConstructor;
}, () => JSX.Element, unknown, {}, {}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls?: unknown;
    inputPrefixCls?: unknown;
    action?: unknown;
    visibilityToggle?: unknown;
    iconRender?: unknown;
    id?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    placeholder?: unknown;
    autocomplete?: unknown;
    type?: unknown;
    name?: unknown;
    size?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    addonBefore?: unknown;
    addonAfter?: unknown;
    prefix?: unknown;
    suffix?: unknown;
    autofocus?: unknown;
    allowClear?: unknown;
    lazy?: unknown;
    maxlength?: unknown;
    loading?: unknown;
    bordered?: unknown;
    htmlSize?: unknown;
    onPressEnter?: unknown;
    onKeydown?: unknown;
    onKeyup?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    onChange?: unknown;
    onInput?: unknown;
    'onUpdate:value'?: unknown;
    valueModifiers?: unknown;
} & {
    prefixCls: string;
    name: string;
    type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
    action: string;
    id: string;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    visibilityToggle: boolean;
} & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
    onKeyup?: (...args: any[]) => any;
    size?: import("../config-provider").SizeType;
    disabled?: boolean;
    value?: string | number;
    loading?: boolean;
    autocomplete?: string;
    defaultValue?: string | number;
    placeholder?: string | number;
    allowClear?: boolean;
    autofocus?: boolean;
    "onUpdate:value"?: (...args: any[]) => any;
    bordered?: boolean;
    readonly?: boolean;
    suffix?: any;
    addonBefore?: any;
    addonAfter?: any;
    prefix?: any;
    htmlSize?: number;
    onPressEnter?: (...args: any[]) => any;
    valueModifiers?: Record<string, any>;
    iconRender?: (...args: any[]) => any;
}>, {
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onInput: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    prefixCls: string;
    value: string | number;
    name: string;
    type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
    action: string;
    id: string;
    "onUpdate:value": (...args: any[]) => any;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    onPressEnter: (...args: any[]) => any;
    visibilityToggle: boolean;
    iconRender: (...args: any[]) => any;
}>;
export default _default;
