import type { Plugin } from 'vue';
import SkeletonButton from './Button';
import SkeletonInput from './Input';
import SkeletonImage from './Image';
import SkeletonAvatar from './Avatar';
export type { SkeletonProps } from './Skeleton';
export { skeletonProps } from './Skeleton';
export { SkeletonButton, SkeletonAvatar, SkeletonInput, SkeletonImage };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
            } & {} & {
                width?: string | number;
                prefixCls?: string;
            }>;
            round: boolean;
            active: boolean;
            loading: boolean;
            avatar: boolean | {
                prefixCls?: string;
                size?: number | "default" | "small" | "large";
                shape?: "circle" | "square";
            };
            paragraph: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
                rows?: unknown;
            } & {} & {
                width?: (string | number) | (string | number)[];
                prefixCls?: string;
                rows?: number;
            }>;
        }> & Omit<Readonly<{
            active?: unknown;
            loading?: unknown;
            prefixCls?: unknown;
            avatar?: unknown;
            title?: unknown;
            paragraph?: unknown;
            round?: unknown;
        } & {
            title: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
            } & {} & {
                width?: string | number;
                prefixCls?: string;
            }>;
            avatar: boolean | {
                prefixCls?: string;
                size?: number | "default" | "small" | "large";
                shape?: "circle" | "square";
            };
            paragraph: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
                rows?: unknown;
            } & {} & {
                width?: (string | number) | (string | number)[];
                prefixCls?: string;
                rows?: number;
            }>;
        } & {
            prefixCls?: string;
            round?: boolean;
            active?: boolean;
            loading?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "round" | "active" | "loading" | "avatar" | "paragraph">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            active?: unknown;
            loading?: unknown;
            prefixCls?: unknown;
            avatar?: unknown;
            title?: unknown;
            paragraph?: unknown;
            round?: unknown;
        } & {
            title: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
            } & {} & {
                width?: string | number;
                prefixCls?: string;
            }>;
            avatar: boolean | {
                prefixCls?: string;
                size?: number | "default" | "small" | "large";
                shape?: "circle" | "square";
            };
            paragraph: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
                rows?: unknown;
            } & {} & {
                width?: (string | number) | (string | number)[];
                prefixCls?: string;
                rows?: number;
            }>;
        } & {
            prefixCls?: string;
            round?: boolean;
            active?: boolean;
            loading?: boolean;
        }>, () => JSX.Element | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            title: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
            } & {} & {
                width?: string | number;
                prefixCls?: string;
            }>;
            round: boolean;
            active: boolean;
            loading: boolean;
            avatar: boolean | {
                prefixCls?: string;
                size?: number | "default" | "small" | "large";
                shape?: "circle" | "square";
            };
            paragraph: boolean | Partial<{
                prefixCls?: unknown;
                width?: unknown;
                rows?: unknown;
            } & {} & {
                width?: (string | number) | (string | number)[];
                prefixCls?: string;
                rows?: number;
            }>;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        active?: unknown;
        loading?: unknown;
        prefixCls?: unknown;
        avatar?: unknown;
        title?: unknown;
        paragraph?: unknown;
        round?: unknown;
    } & {
        title: boolean | Partial<{
            prefixCls?: unknown;
            width?: unknown;
        } & {} & {
            width?: string | number;
            prefixCls?: string;
        }>;
        avatar: boolean | {
            prefixCls?: string;
            size?: number | "default" | "small" | "large";
            shape?: "circle" | "square";
        };
        paragraph: boolean | Partial<{
            prefixCls?: unknown;
            width?: unknown;
            rows?: unknown;
        } & {} & {
            width?: (string | number) | (string | number)[];
            prefixCls?: string;
            rows?: number;
        }>;
    } & {
        prefixCls?: string;
        round?: boolean;
        active?: boolean;
        loading?: boolean;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    active?: unknown;
    loading?: unknown;
    prefixCls?: unknown;
    avatar?: unknown;
    title?: unknown;
    paragraph?: unknown;
    round?: unknown;
} & {
    title: boolean | Partial<{
        prefixCls?: unknown;
        width?: unknown;
    } & {} & {
        width?: string | number;
        prefixCls?: string;
    }>;
    avatar: boolean | {
        prefixCls?: string;
        size?: number | "default" | "small" | "large";
        shape?: "circle" | "square";
    };
    paragraph: boolean | Partial<{
        prefixCls?: unknown;
        width?: unknown;
        rows?: unknown;
    } & {} & {
        width?: (string | number) | (string | number)[];
        prefixCls?: string;
        rows?: number;
    }>;
} & {
    prefixCls?: string;
    round?: boolean;
    active?: boolean;
    loading?: boolean;
}>, () => JSX.Element | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    title: boolean | Partial<{
        prefixCls?: unknown;
        width?: unknown;
    } & {} & {
        width?: string | number;
        prefixCls?: string;
    }>;
    round: boolean;
    active: boolean;
    loading: boolean;
    avatar: boolean | {
        prefixCls?: string;
        size?: number | "default" | "small" | "large";
        shape?: "circle" | "square";
    };
    paragraph: boolean | Partial<{
        prefixCls?: unknown;
        width?: unknown;
        rows?: unknown;
    } & {} & {
        width?: (string | number) | (string | number)[];
        prefixCls?: string;
        rows?: number;
    }>;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Button: typeof SkeletonButton;
    readonly Avatar: typeof SkeletonAvatar;
    readonly Input: typeof SkeletonInput;
    readonly Image: typeof SkeletonImage;
};
export default _default;
