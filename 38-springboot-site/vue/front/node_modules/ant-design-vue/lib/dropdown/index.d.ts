import type { Plugin } from 'vue';
import DropdownButton from './dropdown-button';
import { dropdownProps, dropdownButtonProps } from './props';
export type { DropdownProps } from './dropdown';
export type { DropdownButtonProps } from './dropdown-button';
export { DropdownButton, dropdownProps, dropdownButtonProps };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            transitionName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
        }> & Omit<Readonly<{
            arrow?: unknown;
            trigger?: unknown;
            overlay?: unknown;
            visible?: unknown;
            disabled?: unknown;
            align?: unknown;
            getPopupContainer?: unknown;
            prefixCls?: unknown;
            transitionName?: unknown;
            placement?: unknown;
            overlayClassName?: unknown;
            overlayStyle?: unknown;
            forceRender?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            openClassName?: unknown;
            minOverlayWidthMatchTrigger?: unknown;
            onVisibleChange?: unknown;
            'onUpdate:visible'?: unknown;
        } & {
            prefixCls: string;
            transitionName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
        } & {
            visible?: boolean;
            overlay?: any;
            disabled?: boolean;
            align?: unknown;
            getPopupContainer?: (...args: any[]) => any;
            trigger?: "click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[];
            "onUpdate:visible"?: (val: boolean) => void;
            forceRender?: boolean;
            placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter";
            overlayStyle?: import("vue").CSSProperties;
            onVisibleChange?: (val: boolean) => void;
            arrow?: boolean;
            minOverlayWidthMatchTrigger?: boolean;
        }> & {
            "onUpdate:visible"?: (...args: any[]) => any;
            onVisibleChange?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "getPopupContainer" | "transitionName" | "mouseEnterDelay" | "mouseLeaveDelay" | "overlayClassName" | "openClassName">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "update:visible" | "visibleChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            arrow?: unknown;
            trigger?: unknown;
            overlay?: unknown;
            visible?: unknown;
            disabled?: unknown;
            align?: unknown;
            getPopupContainer?: unknown;
            prefixCls?: unknown;
            transitionName?: unknown;
            placement?: unknown;
            overlayClassName?: unknown;
            overlayStyle?: unknown;
            forceRender?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            openClassName?: unknown;
            minOverlayWidthMatchTrigger?: unknown;
            onVisibleChange?: unknown;
            'onUpdate:visible'?: unknown;
        } & {
            prefixCls: string;
            transitionName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
        } & {
            visible?: boolean;
            overlay?: any;
            disabled?: boolean;
            align?: unknown;
            getPopupContainer?: (...args: any[]) => any;
            trigger?: "click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[];
            "onUpdate:visible"?: (val: boolean) => void;
            forceRender?: boolean;
            placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter";
            overlayStyle?: import("vue").CSSProperties;
            onVisibleChange?: (val: boolean) => void;
            arrow?: boolean;
            minOverlayWidthMatchTrigger?: boolean;
        }> & {
            "onUpdate:visible"?: (...args: any[]) => any;
            onVisibleChange?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], string, {
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            transitionName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        arrow?: unknown;
        trigger?: unknown;
        overlay?: unknown;
        visible?: unknown;
        disabled?: unknown;
        align?: unknown;
        getPopupContainer?: unknown;
        prefixCls?: unknown;
        transitionName?: unknown;
        placement?: unknown;
        overlayClassName?: unknown;
        overlayStyle?: unknown;
        forceRender?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        openClassName?: unknown;
        minOverlayWidthMatchTrigger?: unknown;
        onVisibleChange?: unknown;
        'onUpdate:visible'?: unknown;
    } & {
        prefixCls: string;
        transitionName: string;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        overlayClassName: string;
        openClassName: string;
    } & {
        visible?: boolean;
        overlay?: any;
        disabled?: boolean;
        align?: unknown;
        getPopupContainer?: (...args: any[]) => any;
        trigger?: "click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[];
        "onUpdate:visible"?: (val: boolean) => void;
        forceRender?: boolean;
        placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter";
        overlayStyle?: import("vue").CSSProperties;
        onVisibleChange?: (val: boolean) => void;
        arrow?: boolean;
        minOverlayWidthMatchTrigger?: boolean;
    }> & {
        "onUpdate:visible"?: (...args: any[]) => any;
        onVisibleChange?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    arrow?: unknown;
    trigger?: unknown;
    overlay?: unknown;
    visible?: unknown;
    disabled?: unknown;
    align?: unknown;
    getPopupContainer?: unknown;
    prefixCls?: unknown;
    transitionName?: unknown;
    placement?: unknown;
    overlayClassName?: unknown;
    overlayStyle?: unknown;
    forceRender?: unknown;
    mouseEnterDelay?: unknown;
    mouseLeaveDelay?: unknown;
    openClassName?: unknown;
    minOverlayWidthMatchTrigger?: unknown;
    onVisibleChange?: unknown;
    'onUpdate:visible'?: unknown;
} & {
    prefixCls: string;
    transitionName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    openClassName: string;
} & {
    visible?: boolean;
    overlay?: any;
    disabled?: boolean;
    align?: unknown;
    getPopupContainer?: (...args: any[]) => any;
    trigger?: "click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[];
    "onUpdate:visible"?: (val: boolean) => void;
    forceRender?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter";
    overlayStyle?: import("vue").CSSProperties;
    onVisibleChange?: (val: boolean) => void;
    arrow?: boolean;
    minOverlayWidthMatchTrigger?: boolean;
}> & {
    "onUpdate:visible"?: (...args: any[]) => any;
    onVisibleChange?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], "update:visible" | "visibleChange", {
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    transitionName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    openClassName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Button: typeof DropdownButton;
};
export default _default;
