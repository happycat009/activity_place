import type { PropType } from 'vue';
import type { VueNode } from '../_util/type';
export declare type CheckboxValueType = string | number | boolean;
export interface CheckboxOptionType {
    label: VueNode;
    value: CheckboxValueType;
    disabled?: boolean;
    indeterminate?: boolean;
    onChange?: (e: Event) => void;
}
declare const _default: import("vue").DefineComponent<{
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultValue: {
        type: PropType<CheckboxValueType[]>;
    };
    value: {
        type: PropType<CheckboxValueType[]>;
    };
    options: {
        type: PropType<(string | CheckboxOptionType)[]>;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, {
    formItemContext: import("../form/FormItemContext").FormItemContext;
    configProvider: {
        getTargetContainer?: () => HTMLElement;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        prefixCls?: string;
        getPrefixCls?: (suffixCls?: string, customizePrefixCls?: string) => string;
        renderEmpty?: typeof import("../config-provider/renderEmpty").default;
        transformCellText?: (tableProps: import("../table/interface").TransformCellTextProps) => any;
        csp?: unknown;
        input?: {
            autocomplete: string;
        };
        autoInsertSpaceInButton?: boolean;
        locale?: {
            locale: string;
            Pagination?: any;
            Table?: {
                filterTitle?: string;
                filterConfirm?: any;
                filterReset?: any;
                filterEmptyText?: any;
                emptyText?: any;
                selectAll?: any;
                selectNone?: any;
                selectInvert?: any;
                selectionAll?: any;
                sortTitle?: string;
                expand?: string;
                collapse?: string;
                triggerDesc?: string;
                triggerAsc?: string;
                cancelSort?: string;
            };
            Popconfirm?: {
                [x: string]: any;
            };
            Upload?: {
                [x: string]: any;
            };
            Form?: {
                optional?: string;
                defaultValidateMessages: {
                    default?: string | (() => string);
                    required?: string | (() => string);
                    enum?: string | (() => string);
                    whitespace?: string | (() => string);
                    date?: {
                        format?: string | (() => string);
                        parse?: string | (() => string);
                        invalid?: string | (() => string);
                    };
                    types?: {
                        string?: string | (() => string);
                        method?: string | (() => string);
                        array?: string | (() => string);
                        object?: string | (() => string);
                        number?: string | (() => string);
                        date?: string | (() => string);
                        boolean?: string | (() => string);
                        integer?: string | (() => string);
                        float?: string | (() => string);
                        regexp?: string | (() => string);
                        email?: string | (() => string);
                        url?: string | (() => string);
                        hex?: string | (() => string);
                    };
                    string?: {
                        len?: string | (() => string);
                        min?: string | (() => string);
                        max?: string | (() => string);
                        range?: string | (() => string);
                    };
                    number?: {
                        len?: string | (() => string);
                        min?: string | (() => string);
                        max?: string | (() => string);
                        range?: string | (() => string);
                    };
                    array?: {
                        len?: string | (() => string);
                        min?: string | (() => string);
                        max?: string | (() => string);
                        range?: string | (() => string);
                    };
                    pattern?: {
                        mismatch?: string | (() => string);
                    };
                };
            };
            Image?: {
                preview: string;
            };
            DatePicker?: {
                lang: {
                    locale: string;
                    monthBeforeYear?: boolean;
                    yearFormat: string;
                    monthFormat?: string;
                    quarterFormat?: string;
                    today: string;
                    now: string;
                    backToToday: string;
                    ok: string;
                    timeSelect: string;
                    dateSelect: string;
                    weekSelect?: string;
                    clear: string;
                    month: string;
                    year: string;
                    previousMonth: string;
                    nextMonth: string;
                    monthSelect: string;
                    yearSelect: string;
                    decadeSelect: string;
                    dayFormat: string;
                    dateFormat: string;
                    dateTimeFormat: string;
                    previousYear: string;
                    nextYear: string;
                    previousDecade: string;
                    nextDecade: string;
                    previousCentury: string;
                    nextCentury: string;
                    shortWeekDays?: string[];
                    shortMonths?: string[];
                    placeholder: string;
                    yearPlaceholder?: string;
                    quarterPlaceholder?: string;
                    monthPlaceholder?: string;
                    weekPlaceholder?: string;
                    rangeYearPlaceholder?: [string, string];
                    rangeMonthPlaceholder?: [string, string];
                    rangeWeekPlaceholder?: [string, string];
                    rangePlaceholder?: [string, string];
                };
                timePickerLocale: {
                    placeholder?: string;
                    rangePlaceholder?: [string, string];
                };
                dateFormat?: string;
                dateTimeFormat?: string;
                weekFormat?: string;
                monthFormat?: string;
            };
            TimePicker?: {
                [x: string]: any;
            };
            Calendar?: {
                [x: string]: any;
            };
            Modal?: {
                okText: string;
                cancelText: string;
                justOkText: string;
            };
            Transfer?: {
                titles?: ((string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) | JSX.Element | (string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>)[])[];
                notFoundContent?: (string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) | JSX.Element | (string | number | boolean | void | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>)[];
                searchPlaceholder?: string;
                itemUnit?: string;
                itemsUnit?: string;
                remove?: string;
                selectAll?: string;
                selectCurrent?: string;
                selectInvert?: string;
                removeAll?: string;
                removeCurrent?: string;
            };
            Select?: {
                [x: string]: any;
            };
            Empty?: {
                description: string;
            };
            global?: {
                [x: string]: any;
            };
            PageHeader?: {
                back: string;
            };
            Icon?: {
                [x: string]: any;
            };
            Text?: {
                [x: string]: any;
            };
        };
        pageHeader?: {
            ghost: boolean;
        };
        componentSize?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        space?: {
            size: number | import("../config-provider").SizeType;
        };
        virtual?: boolean;
        dropdownMatchSelectWidth?: number | boolean;
        form?: unknown;
        notUpdateGlobalConfig?: boolean;
    };
}, {
    sValue: CheckboxValueType[];
    registeredValues: any[];
}, {}, {
    getOptions(): any;
    cancelValue(value: CheckboxValueType): void;
    registerValue(value: CheckboxValueType): void;
    toggleOption(option: CheckboxOptionType): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:value")[], "change" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    name?: unknown;
    prefixCls?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    options?: unknown;
    disabled?: unknown;
    onChange?: unknown;
    id?: unknown;
} & {
    prefixCls: string;
    name: string;
    id: string;
} & {
    onChange?: (...args: any[]) => any;
    disabled?: boolean;
    value?: CheckboxValueType[];
    defaultValue?: CheckboxValueType[];
    options?: (string | CheckboxOptionType)[];
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    name: string;
    id: string;
}>;
export default _default;
