import type { PropType, Plugin, ExtractPropTypes } from 'vue';
import { Option, OptGroup } from '../vc-select';
import type { OptionProps as OptionPropsType } from '../vc-select/Option';
declare type RawValue = string | number;
export declare type OptionProps = OptionPropsType;
export declare type OptionType = typeof Option;
export interface LabeledValue {
    key?: string;
    value: RawValue;
    label: any;
}
export declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[] | undefined;
export declare const selectProps: () => {
    value: {
        type: PropType<SelectValue>;
    };
    defaultValue: {
        type: PropType<SelectValue>;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    suffixIcon: import("vue-types").VueTypeValidableDef<any>;
    itemIcon: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large" | "middle">;
    mode: import("vue-types").VueTypeDef<"multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE">;
    bordered: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    choiceTransitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    onFocus: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onChange: {
        type: PropType<(value: SelectValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData | (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[]) => void>;
    };
    onKeydown: {
        type: PropType<(e: KeyboardEvent) => void>;
    };
    onKeyup: {
        type: PropType<(e: KeyboardEvent) => void>;
    };
    onClick: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onMousedown: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onMouseenter: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onMouseleave: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onSelect: {
        type: PropType<(value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void>;
    };
    prefixCls: StringConstructor;
    direction: {
        type: PropType<"ltr" | "rtl">;
    };
    open: {
        type: BooleanConstructor;
        default: any;
    };
    animation: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    tabindex: {
        type: (NumberConstructor | StringConstructor)[];
    };
    onDeselect: {
        type: PropType<(value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void>;
    };
    onClear: {
        type: PropType<import("../vc-select/interface/generator").OnClear>;
    };
    loading: {
        type: BooleanConstructor;
        default: any;
    };
    getPopupContainer: {
        type: PropType<import("../vc-select/interface").RenderDOMFunc>;
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    dropdownMatchSelectWidth: {
        type: PropType<number | boolean>;
        default: any;
    };
    showAction: {
        type: PropType<("click" | "focus")[]>;
    };
    dropdownClassName: StringConstructor;
    dropdownAlign: import("vue-types").VueTypeValidableDef<any>;
    placeholder: import("vue-types").VueTypeValidableDef<any>;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    id: StringConstructor;
    clearIcon: import("vue-types").VueTypeValidableDef<any>;
    options: {
        type: PropType<(import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[]>;
    };
    placement: {
        type: PropType<import("../vc-select/generate").Placement>;
    };
    children: {
        type: PropType<any[]>;
    };
    onSearch: {
        type: PropType<(value: string) => void>;
    };
    labelInValue: {
        type: BooleanConstructor;
        default: any;
    };
    optionLabelProp: StringConstructor;
    fieldNames: {
        type: PropType<import("../vc-select/interface").FieldNames>;
    };
    optionFilterProp: StringConstructor;
    filterOption: {
        type: PropType<boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>>;
        default: any;
    };
    defaultActiveFirstOption: {
        type: BooleanConstructor;
        default: any;
    };
    menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
    searchValue: StringConstructor;
    showSearch: {
        type: BooleanConstructor;
        default: any;
    };
    onInputKeyDown: {
        type: PropType<(e: KeyboardEvent) => void>;
    };
    removeIcon: import("vue-types").VueTypeValidableDef<any>;
    maxTagCount: {
        type: PropType<number | "responsive">;
    };
    maxTagTextLength: NumberConstructor;
    maxTagPlaceholder: import("vue-types").VueTypeValidableDef<any>;
    tokenSeparators: {
        type: PropType<string[]>;
    };
    tagRender: {
        type: PropType<(props: import("../vc-select/interface/generator").CustomTagProps) => any>;
    };
    dropdownStyle: {
        type: PropType<import("vue").CSSProperties>;
    };
    dropdownRender: {
        type: PropType<(menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => any>;
    };
    inputValue: StringConstructor;
    filterSort: {
        type: PropType<(optionA: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, optionB: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => number>;
    };
    autoClearSearchValue: {
        type: BooleanConstructor;
        default: any;
    };
    showArrow: {
        type: BooleanConstructor;
        default: any;
    };
    listHeight: NumberConstructor;
    listItemHeight: NumberConstructor;
    onPopupScroll: {
        type: PropType<(e: UIEvent) => void>;
    };
    onDropdownVisibleChange: {
        type: PropType<(open: boolean) => void>;
    };
    internalProps: {
        type: PropType<{
            mark?: string;
            onClear?: import("../vc-select/interface/generator").OnClear;
            skipTriggerChange?: boolean;
            skipTriggerSelect?: boolean;
            onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
        }>;
        default: {
            mark?: string;
            onClear?: import("../vc-select/interface/generator").OnClear;
            skipTriggerChange?: boolean;
            skipTriggerSelect?: boolean;
            onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
        };
    };
};
export declare type SelectProps = Partial<ExtractPropTypes<ReturnType<typeof selectProps>>>;
export declare const SelectOption: any;
export declare const SelectOptGroup: any;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            open: boolean;
            disabled: boolean;
            loading: boolean;
            virtual: boolean;
            dropdownMatchSelectWidth: number | boolean;
            transitionName: string;
            allowClear: boolean;
            autofocus: boolean;
            defaultOpen: boolean;
            bordered: boolean;
            labelInValue: boolean;
            filterOption: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
            defaultActiveFirstOption: boolean;
            showSearch: boolean;
            choiceTransitionName: string;
            autoClearSearchValue: boolean;
            showArrow: boolean;
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
        }> & Omit<Readonly<{
            value?: unknown;
            defaultValue?: unknown;
            notFoundContent?: unknown;
            suffixIcon?: unknown;
            itemIcon?: unknown;
            size?: unknown;
            mode?: unknown;
            bordered?: unknown;
            transitionName?: unknown;
            choiceTransitionName?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onKeydown?: unknown;
            onKeyup?: unknown;
            onClick?: unknown;
            onMousedown?: unknown;
            onMouseenter?: unknown;
            onMouseleave?: unknown;
            onSelect?: unknown;
            prefixCls?: unknown;
            direction?: unknown;
            open?: unknown;
            animation?: unknown;
            disabled?: unknown;
            tabindex?: unknown;
            onDeselect?: unknown;
            onClear?: unknown;
            loading?: unknown;
            getPopupContainer?: unknown;
            virtual?: unknown;
            dropdownMatchSelectWidth?: unknown;
            showAction?: unknown;
            dropdownClassName?: unknown;
            dropdownAlign?: unknown;
            placeholder?: unknown;
            allowClear?: unknown;
            autofocus?: unknown;
            defaultOpen?: unknown;
            id?: unknown;
            clearIcon?: unknown;
            options?: unknown;
            placement?: unknown;
            children?: unknown;
            onSearch?: unknown;
            labelInValue?: unknown;
            optionLabelProp?: unknown;
            fieldNames?: unknown;
            optionFilterProp?: unknown;
            filterOption?: unknown;
            defaultActiveFirstOption?: unknown;
            menuItemSelectedIcon?: unknown;
            searchValue?: unknown;
            showSearch?: unknown;
            onInputKeyDown?: unknown;
            removeIcon?: unknown;
            maxTagCount?: unknown;
            maxTagTextLength?: unknown;
            maxTagPlaceholder?: unknown;
            tokenSeparators?: unknown;
            tagRender?: unknown;
            dropdownStyle?: unknown;
            dropdownRender?: unknown;
            inputValue?: unknown;
            filterSort?: unknown;
            autoClearSearchValue?: unknown;
            showArrow?: unknown;
            listHeight?: unknown;
            listItemHeight?: unknown;
            onPopupScroll?: unknown;
            onDropdownVisibleChange?: unknown;
            internalProps?: unknown;
        } & {
            transitionName: string;
            bordered: boolean;
            choiceTransitionName: string;
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
        } & {
            onFocus?: (e: FocusEvent) => void;
            onBlur?: (e: FocusEvent) => void;
            onChange?: (value: SelectValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData | (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[]) => void;
            onKeydown?: (e: KeyboardEvent) => void;
            onKeyup?: (e: KeyboardEvent) => void;
            onClick?: (e: MouseEvent) => void;
            onMousedown?: (e: MouseEvent) => void;
            onMouseenter?: (e: MouseEvent) => void;
            onMouseleave?: (e: MouseEvent) => void;
            onSelect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
            prefixCls?: string;
            size?: "default" | "small" | "large" | "middle";
            direction?: "ltr" | "rtl";
            open?: boolean;
            animation?: string;
            disabled?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            value?: SelectValue;
            tabindex?: string | number;
            onDeselect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
            onClear?: import("../vc-select/interface/generator").OnClear;
            loading?: boolean;
            getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
            virtual?: boolean;
            dropdownMatchSelectWidth?: number | boolean;
            defaultValue?: SelectValue;
            showAction?: ("click" | "focus")[];
            dropdownClassName?: string;
            dropdownAlign?: any;
            placeholder?: any;
            allowClear?: boolean;
            autofocus?: boolean;
            defaultOpen?: boolean;
            id?: string;
            suffixIcon?: any;
            clearIcon?: any;
            options?: (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[];
            placement?: import("../vc-select/generate").Placement;
            children?: any[];
            onSearch?: (value: string) => void;
            notFoundContent?: any;
            labelInValue?: boolean;
            optionLabelProp?: string;
            fieldNames?: unknown;
            optionFilterProp?: string;
            filterOption?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
            defaultActiveFirstOption?: boolean;
            menuItemSelectedIcon?: any;
            searchValue?: string;
            showSearch?: boolean;
            onInputKeyDown?: (e: KeyboardEvent) => void;
            removeIcon?: any;
            maxTagCount?: number | "responsive";
            maxTagTextLength?: number;
            maxTagPlaceholder?: any;
            tokenSeparators?: string[];
            tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
            dropdownStyle?: unknown;
            dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => any;
            inputValue?: string;
            filterSort?: (optionA: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, optionB: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => number;
            autoClearSearchValue?: boolean;
            showArrow?: boolean;
            listHeight?: number;
            listItemHeight?: number;
            onPopupScroll?: (e: UIEvent) => void;
            onDropdownVisibleChange?: (open: boolean) => void;
            itemIcon?: any;
        }> & {
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "open" | "disabled" | "loading" | "virtual" | "dropdownMatchSelectWidth" | "transitionName" | "allowClear" | "autofocus" | "defaultOpen" | "bordered" | "labelInValue" | "filterOption" | "defaultActiveFirstOption" | "showSearch" | "choiceTransitionName" | "autoClearSearchValue" | "showArrow" | "internalProps">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "update:value", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            value?: unknown;
            defaultValue?: unknown;
            notFoundContent?: unknown;
            suffixIcon?: unknown;
            itemIcon?: unknown;
            size?: unknown;
            mode?: unknown;
            bordered?: unknown;
            transitionName?: unknown;
            choiceTransitionName?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onKeydown?: unknown;
            onKeyup?: unknown;
            onClick?: unknown;
            onMousedown?: unknown;
            onMouseenter?: unknown;
            onMouseleave?: unknown;
            onSelect?: unknown;
            prefixCls?: unknown;
            direction?: unknown;
            open?: unknown;
            animation?: unknown;
            disabled?: unknown;
            tabindex?: unknown;
            onDeselect?: unknown;
            onClear?: unknown;
            loading?: unknown;
            getPopupContainer?: unknown;
            virtual?: unknown;
            dropdownMatchSelectWidth?: unknown;
            showAction?: unknown;
            dropdownClassName?: unknown;
            dropdownAlign?: unknown;
            placeholder?: unknown;
            allowClear?: unknown;
            autofocus?: unknown;
            defaultOpen?: unknown;
            id?: unknown;
            clearIcon?: unknown;
            options?: unknown;
            placement?: unknown;
            children?: unknown;
            onSearch?: unknown;
            labelInValue?: unknown;
            optionLabelProp?: unknown;
            fieldNames?: unknown;
            optionFilterProp?: unknown;
            filterOption?: unknown;
            defaultActiveFirstOption?: unknown;
            menuItemSelectedIcon?: unknown;
            searchValue?: unknown;
            showSearch?: unknown;
            onInputKeyDown?: unknown;
            removeIcon?: unknown;
            maxTagCount?: unknown;
            maxTagTextLength?: unknown;
            maxTagPlaceholder?: unknown;
            tokenSeparators?: unknown;
            tagRender?: unknown;
            dropdownStyle?: unknown;
            dropdownRender?: unknown;
            inputValue?: unknown;
            filterSort?: unknown;
            autoClearSearchValue?: unknown;
            showArrow?: unknown;
            listHeight?: unknown;
            listItemHeight?: unknown;
            onPopupScroll?: unknown;
            onDropdownVisibleChange?: unknown;
            internalProps?: unknown;
        } & {
            transitionName: string;
            bordered: boolean;
            choiceTransitionName: string;
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
        } & {
            onFocus?: (e: FocusEvent) => void;
            onBlur?: (e: FocusEvent) => void;
            onChange?: (value: SelectValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData | (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[]) => void;
            onKeydown?: (e: KeyboardEvent) => void;
            onKeyup?: (e: KeyboardEvent) => void;
            onClick?: (e: MouseEvent) => void;
            onMousedown?: (e: MouseEvent) => void;
            onMouseenter?: (e: MouseEvent) => void;
            onMouseleave?: (e: MouseEvent) => void;
            onSelect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
            prefixCls?: string;
            size?: "default" | "small" | "large" | "middle";
            direction?: "ltr" | "rtl";
            open?: boolean;
            animation?: string;
            disabled?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            value?: SelectValue;
            tabindex?: string | number;
            onDeselect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
            onClear?: import("../vc-select/interface/generator").OnClear;
            loading?: boolean;
            getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
            virtual?: boolean;
            dropdownMatchSelectWidth?: number | boolean;
            defaultValue?: SelectValue;
            showAction?: ("click" | "focus")[];
            dropdownClassName?: string;
            dropdownAlign?: any;
            placeholder?: any;
            allowClear?: boolean;
            autofocus?: boolean;
            defaultOpen?: boolean;
            id?: string;
            suffixIcon?: any;
            clearIcon?: any;
            options?: (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[];
            placement?: import("../vc-select/generate").Placement;
            children?: any[];
            onSearch?: (value: string) => void;
            notFoundContent?: any;
            labelInValue?: boolean;
            optionLabelProp?: string;
            fieldNames?: unknown;
            optionFilterProp?: string;
            filterOption?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
            defaultActiveFirstOption?: boolean;
            menuItemSelectedIcon?: any;
            searchValue?: string;
            showSearch?: boolean;
            onInputKeyDown?: (e: KeyboardEvent) => void;
            removeIcon?: any;
            maxTagCount?: number | "responsive";
            maxTagTextLength?: number;
            maxTagPlaceholder?: any;
            tokenSeparators?: string[];
            tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
            dropdownStyle?: unknown;
            dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => any;
            inputValue?: string;
            filterSort?: (optionA: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, optionB: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => number;
            autoClearSearchValue?: boolean;
            showArrow?: boolean;
            listHeight?: number;
            listItemHeight?: number;
            onPopupScroll?: (e: UIEvent) => void;
            onDropdownVisibleChange?: (open: boolean) => void;
            itemIcon?: any;
        }> & {
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "update:value")[], string, {
            open: boolean;
            disabled: boolean;
            loading: boolean;
            virtual: boolean;
            dropdownMatchSelectWidth: number | boolean;
            transitionName: string;
            allowClear: boolean;
            autofocus: boolean;
            defaultOpen: boolean;
            bordered: boolean;
            labelInValue: boolean;
            filterOption: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
            defaultActiveFirstOption: boolean;
            showSearch: boolean;
            choiceTransitionName: string;
            autoClearSearchValue: boolean;
            showArrow: boolean;
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        value?: unknown;
        defaultValue?: unknown;
        notFoundContent?: unknown;
        suffixIcon?: unknown;
        itemIcon?: unknown;
        size?: unknown;
        mode?: unknown;
        bordered?: unknown;
        transitionName?: unknown;
        choiceTransitionName?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
        onChange?: unknown;
        onKeydown?: unknown;
        onKeyup?: unknown;
        onClick?: unknown;
        onMousedown?: unknown;
        onMouseenter?: unknown;
        onMouseleave?: unknown;
        onSelect?: unknown;
        prefixCls?: unknown;
        direction?: unknown;
        open?: unknown;
        animation?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        onDeselect?: unknown;
        onClear?: unknown;
        loading?: unknown;
        getPopupContainer?: unknown;
        virtual?: unknown;
        dropdownMatchSelectWidth?: unknown;
        showAction?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        defaultOpen?: unknown;
        id?: unknown;
        clearIcon?: unknown;
        options?: unknown;
        placement?: unknown;
        children?: unknown;
        onSearch?: unknown;
        labelInValue?: unknown;
        optionLabelProp?: unknown;
        fieldNames?: unknown;
        optionFilterProp?: unknown;
        filterOption?: unknown;
        defaultActiveFirstOption?: unknown;
        menuItemSelectedIcon?: unknown;
        searchValue?: unknown;
        showSearch?: unknown;
        onInputKeyDown?: unknown;
        removeIcon?: unknown;
        maxTagCount?: unknown;
        maxTagTextLength?: unknown;
        maxTagPlaceholder?: unknown;
        tokenSeparators?: unknown;
        tagRender?: unknown;
        dropdownStyle?: unknown;
        dropdownRender?: unknown;
        inputValue?: unknown;
        filterSort?: unknown;
        autoClearSearchValue?: unknown;
        showArrow?: unknown;
        listHeight?: unknown;
        listItemHeight?: unknown;
        onPopupScroll?: unknown;
        onDropdownVisibleChange?: unknown;
        internalProps?: unknown;
    } & {
        transitionName: string;
        bordered: boolean;
        choiceTransitionName: string;
        internalProps: {
            mark?: string;
            onClear?: import("../vc-select/interface/generator").OnClear;
            skipTriggerChange?: boolean;
            skipTriggerSelect?: boolean;
            onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
            onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
        };
    } & {
        onFocus?: (e: FocusEvent) => void;
        onBlur?: (e: FocusEvent) => void;
        onChange?: (value: SelectValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData | (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[]) => void;
        onKeydown?: (e: KeyboardEvent) => void;
        onKeyup?: (e: KeyboardEvent) => void;
        onClick?: (e: MouseEvent) => void;
        onMousedown?: (e: MouseEvent) => void;
        onMouseenter?: (e: MouseEvent) => void;
        onMouseleave?: (e: MouseEvent) => void;
        onSelect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large" | "middle";
        direction?: "ltr" | "rtl";
        open?: boolean;
        animation?: string;
        disabled?: boolean;
        mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
        value?: SelectValue;
        tabindex?: string | number;
        onDeselect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
        onClear?: import("../vc-select/interface/generator").OnClear;
        loading?: boolean;
        getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
        virtual?: boolean;
        dropdownMatchSelectWidth?: number | boolean;
        defaultValue?: SelectValue;
        showAction?: ("click" | "focus")[];
        dropdownClassName?: string;
        dropdownAlign?: any;
        placeholder?: any;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        id?: string;
        suffixIcon?: any;
        clearIcon?: any;
        options?: (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[];
        placement?: import("../vc-select/generate").Placement;
        children?: any[];
        onSearch?: (value: string) => void;
        notFoundContent?: any;
        labelInValue?: boolean;
        optionLabelProp?: string;
        fieldNames?: unknown;
        optionFilterProp?: string;
        filterOption?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
        defaultActiveFirstOption?: boolean;
        menuItemSelectedIcon?: any;
        searchValue?: string;
        showSearch?: boolean;
        onInputKeyDown?: (e: KeyboardEvent) => void;
        removeIcon?: any;
        maxTagCount?: number | "responsive";
        maxTagTextLength?: number;
        maxTagPlaceholder?: any;
        tokenSeparators?: string[];
        tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
        dropdownStyle?: unknown;
        dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => any;
        inputValue?: string;
        filterSort?: (optionA: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, optionB: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => number;
        autoClearSearchValue?: boolean;
        showArrow?: boolean;
        listHeight?: number;
        listItemHeight?: number;
        onPopupScroll?: (e: UIEvent) => void;
        onDropdownVisibleChange?: (open: boolean) => void;
        itemIcon?: any;
    }> & {
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    value?: unknown;
    defaultValue?: unknown;
    notFoundContent?: unknown;
    suffixIcon?: unknown;
    itemIcon?: unknown;
    size?: unknown;
    mode?: unknown;
    bordered?: unknown;
    transitionName?: unknown;
    choiceTransitionName?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    onChange?: unknown;
    onKeydown?: unknown;
    onKeyup?: unknown;
    onClick?: unknown;
    onMousedown?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
    onSelect?: unknown;
    prefixCls?: unknown;
    direction?: unknown;
    open?: unknown;
    animation?: unknown;
    disabled?: unknown;
    tabindex?: unknown;
    onDeselect?: unknown;
    onClear?: unknown;
    loading?: unknown;
    getPopupContainer?: unknown;
    virtual?: unknown;
    dropdownMatchSelectWidth?: unknown;
    showAction?: unknown;
    dropdownClassName?: unknown;
    dropdownAlign?: unknown;
    placeholder?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    defaultOpen?: unknown;
    id?: unknown;
    clearIcon?: unknown;
    options?: unknown;
    placement?: unknown;
    children?: unknown;
    onSearch?: unknown;
    labelInValue?: unknown;
    optionLabelProp?: unknown;
    fieldNames?: unknown;
    optionFilterProp?: unknown;
    filterOption?: unknown;
    defaultActiveFirstOption?: unknown;
    menuItemSelectedIcon?: unknown;
    searchValue?: unknown;
    showSearch?: unknown;
    onInputKeyDown?: unknown;
    removeIcon?: unknown;
    maxTagCount?: unknown;
    maxTagTextLength?: unknown;
    maxTagPlaceholder?: unknown;
    tokenSeparators?: unknown;
    tagRender?: unknown;
    dropdownStyle?: unknown;
    dropdownRender?: unknown;
    inputValue?: unknown;
    filterSort?: unknown;
    autoClearSearchValue?: unknown;
    showArrow?: unknown;
    listHeight?: unknown;
    listItemHeight?: unknown;
    onPopupScroll?: unknown;
    onDropdownVisibleChange?: unknown;
    internalProps?: unknown;
} & {
    transitionName: string;
    bordered: boolean;
    choiceTransitionName: string;
    internalProps: {
        mark?: string;
        onClear?: import("../vc-select/interface/generator").OnClear;
        skipTriggerChange?: boolean;
        skipTriggerSelect?: boolean;
        onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
        onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
    };
} & {
    onFocus?: (e: FocusEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onChange?: (value: SelectValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData | (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[]) => void;
    onKeydown?: (e: KeyboardEvent) => void;
    onKeyup?: (e: KeyboardEvent) => void;
    onClick?: (e: MouseEvent) => void;
    onMousedown?: (e: MouseEvent) => void;
    onMouseenter?: (e: MouseEvent) => void;
    onMouseleave?: (e: MouseEvent) => void;
    onSelect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
    prefixCls?: string;
    size?: "default" | "small" | "large" | "middle";
    direction?: "ltr" | "rtl";
    open?: boolean;
    animation?: string;
    disabled?: boolean;
    mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
    value?: SelectValue;
    tabindex?: string | number;
    onDeselect?: (value: RawValue | LabeledValue, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => void;
    onClear?: import("../vc-select/interface/generator").OnClear;
    loading?: boolean;
    getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
    virtual?: boolean;
    dropdownMatchSelectWidth?: number | boolean;
    defaultValue?: SelectValue;
    showAction?: ("click" | "focus")[];
    dropdownClassName?: string;
    dropdownAlign?: any;
    placeholder?: any;
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    id?: string;
    suffixIcon?: any;
    clearIcon?: any;
    options?: (import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData)[];
    placement?: import("../vc-select/generate").Placement;
    children?: any[];
    onSearch?: (value: string) => void;
    notFoundContent?: any;
    labelInValue?: boolean;
    optionLabelProp?: string;
    fieldNames?: unknown;
    optionFilterProp?: string;
    filterOption?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
    defaultActiveFirstOption?: boolean;
    menuItemSelectedIcon?: any;
    searchValue?: string;
    showSearch?: boolean;
    onInputKeyDown?: (e: KeyboardEvent) => void;
    removeIcon?: any;
    maxTagCount?: number | "responsive";
    maxTagTextLength?: number;
    maxTagPlaceholder?: any;
    tokenSeparators?: string[];
    tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
    dropdownStyle?: unknown;
    dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) => any;
    inputValue?: string;
    filterSort?: (optionA: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, optionB: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData) => number;
    autoClearSearchValue?: boolean;
    showArrow?: boolean;
    listHeight?: number;
    listItemHeight?: number;
    onPopupScroll?: (e: UIEvent) => void;
    onDropdownVisibleChange?: (open: boolean) => void;
    itemIcon?: any;
}> & {
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "update:value")[], "blur" | "change" | "update:value", {
    open: boolean;
    disabled: boolean;
    loading: boolean;
    virtual: boolean;
    dropdownMatchSelectWidth: number | boolean;
    transitionName: string;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    bordered: boolean;
    labelInValue: boolean;
    filterOption: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData>;
    defaultActiveFirstOption: boolean;
    showSearch: boolean;
    choiceTransitionName: string;
    autoClearSearchValue: boolean;
    showArrow: boolean;
    internalProps: {
        mark?: string;
        onClear?: import("../vc-select/interface/generator").OnClear;
        skipTriggerChange?: boolean;
        skipTriggerSelect?: boolean;
        onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
        onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-select/interface").OptionData | import("../vc-select/interface").OptionGroupData, source: import("../vc-select/interface/generator").SelectSource) => void;
    };
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Option: typeof Option;
    readonly OptGroup: typeof OptGroup;
    readonly SECRET_COMBOBOX_MODE_DO_NOT_USE: 'SECRET_COMBOBOX_MODE_DO_NOT_USE';
};
export default _default;
