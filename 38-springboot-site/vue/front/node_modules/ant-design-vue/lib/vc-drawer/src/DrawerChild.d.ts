export interface scrollLockOptions {
    container: HTMLElement;
}
declare const DrawerChild: import("vue").DefineComponent<{
    getContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getOpenCount: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    scrollLocker: import("vue-types").VueTypeValidableDef<any>;
    switchScrollingEffect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number>;
    height: import("vue-types").VueTypeDef<string | number>;
    style: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    class: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("./IDrawerPropTypes").IPlacement>;
    };
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    level: {
        type: import("vue").PropType<string | string[]>;
    };
    levelMove: {
        type: import("vue").PropType<(number | [number, number]) | ((e: {
            target: HTMLElement;
            open: boolean;
        }) => number | [number, number])>;
    };
    duration: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    ease: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showMask: import("vue-types").VueTypeValidableDef<boolean>;
    maskClosable: import("vue-types").VueTypeValidableDef<boolean>;
    maskStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    keyboard: import("vue-types").VueTypeValidableDef<boolean>;
    contentWrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    open: import("vue-types").VueTypeValidableDef<boolean>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "close" | "handleClick")[], "change" | "close" | "handleClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    getContainer?: unknown;
    getOpenCount?: unknown;
    scrollLocker?: unknown;
    switchScrollingEffect?: unknown;
    prefixCls?: unknown;
    width?: unknown;
    height?: unknown;
    style?: unknown;
    class?: unknown;
    placement?: unknown;
    wrapperClassName?: unknown;
    level?: unknown;
    levelMove?: unknown;
    duration?: unknown;
    ease?: unknown;
    showMask?: unknown;
    maskClosable?: unknown;
    maskStyle?: unknown;
    afterVisibleChange?: unknown;
    keyboard?: unknown;
    contentWrapperStyle?: unknown;
    autofocus?: unknown;
    open?: unknown;
} & {
    class: string;
    prefixCls: string;
    ease: string;
    duration: string;
    wrapperClassName: string;
} & {
    style?: import("vue").CSSProperties;
    width?: string | number;
    height?: string | number;
    open?: boolean;
    getContainer?: (...args: any[]) => any;
    maskClosable?: boolean;
    autofocus?: boolean;
    placement?: import("./IDrawerPropTypes").IPlacement;
    afterVisibleChange?: (...args: any[]) => any;
    level?: string | string[];
    keyboard?: boolean;
    getOpenCount?: (...args: any[]) => any;
    scrollLocker?: any;
    switchScrollingEffect?: (...args: any[]) => any;
    levelMove?: (number | [number, number]) | ((e: {
        target: HTMLElement;
        open: boolean;
    }) => number | [number, number]);
    showMask?: boolean;
    maskStyle?: import("vue").CSSProperties;
    contentWrapperStyle?: import("vue").CSSProperties;
}> & {
    onChange?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onHandleClick?: (...args: any[]) => any;
}, {
    class: string;
    prefixCls: string;
    ease: string;
    duration: string;
    getContainer: (...args: any[]) => any;
    afterVisibleChange: (...args: any[]) => any;
    wrapperClassName: string;
    getOpenCount: (...args: any[]) => any;
    switchScrollingEffect: (...args: any[]) => any;
}>;
export default DrawerChild;
