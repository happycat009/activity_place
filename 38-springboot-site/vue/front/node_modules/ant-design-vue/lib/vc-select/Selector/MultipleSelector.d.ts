import type { LabelValueType, RawValueType, CustomTagProps } from '../interface/generator';
import type { RenderNode } from '../interface';
import type { InnerSelectorProps } from './interface';
import type { VueNode } from '../../_util/type';
declare type SelectorProps = InnerSelectorProps & {
    removeIcon?: RenderNode;
    maxTagCount?: number | 'responsive';
    maxTagTextLength?: number;
    maxTagPlaceholder?: VueNode | ((omittedValues: LabelValueType[]) => VueNode);
    tokenSeparators?: string[];
    tagRender?: (props: CustomTagProps) => VueNode;
    onToggleOpen: any;
    choiceTransitionName?: string;
    onSelect: (value: RawValueType, option: {
        selected: boolean;
    }) => void;
};
declare const SelectSelector: import("vue").DefineComponent<SelectorProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<SelectorProps>, {
    onToggleOpen: any;
}>;
export default SelectSelector;
