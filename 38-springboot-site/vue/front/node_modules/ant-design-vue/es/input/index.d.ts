import type { Plugin } from 'vue';
import Group from './Group';
import Search from './Search';
import TextArea from './TextArea';
import Password from './Password';
export { Group as InputGroup, Search as InputSearch, TextArea as Textarea, Password as InputPassword, };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            value: string | number;
            name: string;
            type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
            id: string;
            "onUpdate:value": (...args: any[]) => any;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
        }> & Omit<Readonly<{
            id?: unknown;
            prefixCls?: unknown;
            inputPrefixCls?: unknown;
            defaultValue?: unknown;
            value?: unknown;
            placeholder?: unknown;
            autocomplete?: unknown;
            type?: unknown;
            name?: unknown;
            size?: unknown;
            disabled?: unknown;
            readonly?: unknown;
            addonBefore?: unknown;
            addonAfter?: unknown;
            prefix?: unknown;
            suffix?: unknown;
            autofocus?: unknown;
            allowClear?: unknown;
            lazy?: unknown;
            maxlength?: unknown;
            loading?: unknown;
            bordered?: unknown;
            htmlSize?: unknown;
            onPressEnter?: unknown;
            onKeydown?: unknown;
            onKeyup?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onInput?: unknown;
            'onUpdate:value'?: unknown;
            valueModifiers?: unknown;
        } & {
            prefixCls: string;
            name: string;
            type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
            id: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
        } & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onInput?: (...args: any[]) => any;
            onKeydown?: (...args: any[]) => any;
            onKeyup?: (...args: any[]) => any;
            size?: import("../config-provider").SizeType;
            disabled?: boolean;
            value?: string | number;
            loading?: boolean;
            autocomplete?: string;
            defaultValue?: string | number;
            placeholder?: string | number;
            allowClear?: boolean;
            autofocus?: boolean;
            "onUpdate:value"?: (...args: any[]) => any;
            bordered?: boolean;
            readonly?: boolean;
            suffix?: any;
            addonBefore?: any;
            addonAfter?: any;
            prefix?: any;
            htmlSize?: number;
            onPressEnter?: (...args: any[]) => any;
            valueModifiers?: Record<string, any>;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onFocus" | "onBlur" | "onChange" | "onInput" | "onKeydown" | "onKeyup" | "prefixCls" | "value" | "name" | "type" | "id" | "onUpdate:value" | "inputPrefixCls" | "lazy" | "maxlength" | "onPressEnter">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            id?: unknown;
            prefixCls?: unknown;
            inputPrefixCls?: unknown;
            defaultValue?: unknown;
            value?: unknown;
            placeholder?: unknown;
            autocomplete?: unknown;
            type?: unknown;
            name?: unknown;
            size?: unknown;
            disabled?: unknown;
            readonly?: unknown;
            addonBefore?: unknown;
            addonAfter?: unknown;
            prefix?: unknown;
            suffix?: unknown;
            autofocus?: unknown;
            allowClear?: unknown;
            lazy?: unknown;
            maxlength?: unknown;
            loading?: unknown;
            bordered?: unknown;
            htmlSize?: unknown;
            onPressEnter?: unknown;
            onKeydown?: unknown;
            onKeyup?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onInput?: unknown;
            'onUpdate:value'?: unknown;
            valueModifiers?: unknown;
        } & {
            prefixCls: string;
            name: string;
            type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
            id: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
        } & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onInput?: (...args: any[]) => any;
            onKeydown?: (...args: any[]) => any;
            onKeyup?: (...args: any[]) => any;
            size?: import("../config-provider").SizeType;
            disabled?: boolean;
            value?: string | number;
            loading?: boolean;
            autocomplete?: string;
            defaultValue?: string | number;
            placeholder?: string | number;
            allowClear?: boolean;
            autofocus?: boolean;
            "onUpdate:value"?: (...args: any[]) => any;
            bordered?: boolean;
            readonly?: boolean;
            suffix?: any;
            addonBefore?: any;
            addonAfter?: any;
            prefix?: any;
            htmlSize?: number;
            onPressEnter?: (...args: any[]) => any;
            valueModifiers?: Record<string, any>;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            value: string | number;
            name: string;
            type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
            id: string;
            "onUpdate:value": (...args: any[]) => any;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        id?: unknown;
        prefixCls?: unknown;
        inputPrefixCls?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        placeholder?: unknown;
        autocomplete?: unknown;
        type?: unknown;
        name?: unknown;
        size?: unknown;
        disabled?: unknown;
        readonly?: unknown;
        addonBefore?: unknown;
        addonAfter?: unknown;
        prefix?: unknown;
        suffix?: unknown;
        autofocus?: unknown;
        allowClear?: unknown;
        lazy?: unknown;
        maxlength?: unknown;
        loading?: unknown;
        bordered?: unknown;
        htmlSize?: unknown;
        onPressEnter?: unknown;
        onKeydown?: unknown;
        onKeyup?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
        onChange?: unknown;
        onInput?: unknown;
        'onUpdate:value'?: unknown;
        valueModifiers?: unknown;
    } & {
        prefixCls: string;
        name: string;
        type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
        id: string;
        inputPrefixCls: string;
        lazy: boolean;
        maxlength: number;
    } & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onInput?: (...args: any[]) => any;
        onKeydown?: (...args: any[]) => any;
        onKeyup?: (...args: any[]) => any;
        size?: import("../config-provider").SizeType;
        disabled?: boolean;
        value?: string | number;
        loading?: boolean;
        autocomplete?: string;
        defaultValue?: string | number;
        placeholder?: string | number;
        allowClear?: boolean;
        autofocus?: boolean;
        "onUpdate:value"?: (...args: any[]) => any;
        bordered?: boolean;
        readonly?: boolean;
        suffix?: any;
        addonBefore?: any;
        addonAfter?: any;
        prefix?: any;
        htmlSize?: number;
        onPressEnter?: (...args: any[]) => any;
        valueModifiers?: Record<string, any>;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    id?: unknown;
    prefixCls?: unknown;
    inputPrefixCls?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    placeholder?: unknown;
    autocomplete?: unknown;
    type?: unknown;
    name?: unknown;
    size?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    addonBefore?: unknown;
    addonAfter?: unknown;
    prefix?: unknown;
    suffix?: unknown;
    autofocus?: unknown;
    allowClear?: unknown;
    lazy?: unknown;
    maxlength?: unknown;
    loading?: unknown;
    bordered?: unknown;
    htmlSize?: unknown;
    onPressEnter?: unknown;
    onKeydown?: unknown;
    onKeyup?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    onChange?: unknown;
    onInput?: unknown;
    'onUpdate:value'?: unknown;
    valueModifiers?: unknown;
} & {
    prefixCls: string;
    name: string;
    type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
    id: string;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
} & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
    onKeyup?: (...args: any[]) => any;
    size?: import("../config-provider").SizeType;
    disabled?: boolean;
    value?: string | number;
    loading?: boolean;
    autocomplete?: string;
    defaultValue?: string | number;
    placeholder?: string | number;
    allowClear?: boolean;
    autofocus?: boolean;
    "onUpdate:value"?: (...args: any[]) => any;
    bordered?: boolean;
    readonly?: boolean;
    suffix?: any;
    addonBefore?: any;
    addonAfter?: any;
    prefix?: any;
    htmlSize?: number;
    onPressEnter?: (...args: any[]) => any;
    valueModifiers?: Record<string, any>;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onInput: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    prefixCls: string;
    value: string | number;
    name: string;
    type: "number" | "search" | "button" | "time" | "hidden" | "date" | "week" | "month" | "submit" | "image" | "text" | "reset" | "checkbox" | "radio" | "color" | "range" | "tel" | "url" | "email" | "datetime-local" | "file" | "password";
    id: string;
    "onUpdate:value": (...args: any[]) => any;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    onPressEnter: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Group: typeof Group;
    readonly Search: typeof Search;
    readonly TextArea: typeof TextArea;
    readonly Password: typeof Password;
};
export default _default;
