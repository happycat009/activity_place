import { tooltipProps } from './Tooltip';
export type { TooltipProps, AdjustOverflow, PlacementsConfig, TooltipAlignConfig, PlacementTypes, } from './Tooltip';
export { tooltipProps };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            getPopupContainer: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            transitionName: string;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            onVisibleChange: (...args: any[]) => any;
            openClassName: string;
            children: unknown[];
        }> & Omit<Readonly<{
            title?: unknown;
            trigger?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            placement?: unknown;
            color?: unknown;
            transitionName?: unknown;
            overlayStyle?: unknown;
            overlayClassName?: unknown;
            openClassName?: unknown;
            prefixCls?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            getPopupContainer?: unknown;
            arrowPointAtCenter?: unknown;
            autoAdjustOverflow?: unknown;
            destroyTooltipOnHide?: unknown;
            align?: unknown;
            builtinPlacements?: unknown;
            children?: unknown;
            onVisibleChange?: unknown;
            'onUpdate:visible'?: unknown;
        } & {
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
            children: unknown[];
        } & {
            title?: any;
            visible?: boolean;
            getPopupContainer?: (...args: any[]) => any;
            trigger?: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            "onUpdate:visible"?: (...args: any[]) => any;
            defaultVisible?: boolean;
            placement?: "left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            overlayStyle?: import("vue").CSSProperties;
            destroyTooltipOnHide?: boolean;
            onVisibleChange?: (...args: any[]) => any;
            autoAdjustOverflow?: boolean | {
                [key: string]: any;
            };
            arrowPointAtCenter?: boolean;
        }> & {
            "onUpdate:visible"?: (...args: any[]) => any;
            onVisibleChange?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "color" | "align" | "getPopupContainer" | "onUpdate:visible" | "transitionName" | "builtinPlacements" | "mouseEnterDelay" | "mouseLeaveDelay" | "overlayClassName" | "onVisibleChange" | "openClassName" | "children">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "update:visible" | "visibleChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            title?: unknown;
            trigger?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            placement?: unknown;
            color?: unknown;
            transitionName?: unknown;
            overlayStyle?: unknown;
            overlayClassName?: unknown;
            openClassName?: unknown;
            prefixCls?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            getPopupContainer?: unknown;
            arrowPointAtCenter?: unknown;
            autoAdjustOverflow?: unknown;
            destroyTooltipOnHide?: unknown;
            align?: unknown;
            builtinPlacements?: unknown;
            children?: unknown;
            onVisibleChange?: unknown;
            'onUpdate:visible'?: unknown;
        } & {
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
            children: unknown[];
        } & {
            title?: any;
            visible?: boolean;
            getPopupContainer?: (...args: any[]) => any;
            trigger?: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            "onUpdate:visible"?: (...args: any[]) => any;
            defaultVisible?: boolean;
            placement?: "left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            overlayStyle?: import("vue").CSSProperties;
            destroyTooltipOnHide?: boolean;
            onVisibleChange?: (...args: any[]) => any;
            autoAdjustOverflow?: boolean | {
                [key: string]: any;
            };
            arrowPointAtCenter?: boolean;
        }> & {
            "onUpdate:visible"?: (...args: any[]) => any;
            onVisibleChange?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], string, {
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            getPopupContainer: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            transitionName: string;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            onVisibleChange: (...args: any[]) => any;
            openClassName: string;
            children: unknown[];
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        title?: unknown;
        trigger?: unknown;
        visible?: unknown;
        defaultVisible?: unknown;
        placement?: unknown;
        color?: unknown;
        transitionName?: unknown;
        overlayStyle?: unknown;
        overlayClassName?: unknown;
        openClassName?: unknown;
        prefixCls?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        getPopupContainer?: unknown;
        arrowPointAtCenter?: unknown;
        autoAdjustOverflow?: unknown;
        destroyTooltipOnHide?: unknown;
        align?: unknown;
        builtinPlacements?: unknown;
        children?: unknown;
        onVisibleChange?: unknown;
        'onUpdate:visible'?: unknown;
    } & {
        prefixCls: string;
        color: string;
        align: {
            [key: string]: any;
        };
        transitionName: string;
        builtinPlacements: {
            [key: string]: any;
        };
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        overlayClassName: string;
        openClassName: string;
        children: unknown[];
    } & {
        title?: any;
        visible?: boolean;
        getPopupContainer?: (...args: any[]) => any;
        trigger?: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
        "onUpdate:visible"?: (...args: any[]) => any;
        defaultVisible?: boolean;
        placement?: "left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
        overlayStyle?: import("vue").CSSProperties;
        destroyTooltipOnHide?: boolean;
        onVisibleChange?: (...args: any[]) => any;
        autoAdjustOverflow?: boolean | {
            [key: string]: any;
        };
        arrowPointAtCenter?: boolean;
    }> & {
        "onUpdate:visible"?: (...args: any[]) => any;
        onVisibleChange?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: unknown;
    trigger?: unknown;
    visible?: unknown;
    defaultVisible?: unknown;
    placement?: unknown;
    color?: unknown;
    transitionName?: unknown;
    overlayStyle?: unknown;
    overlayClassName?: unknown;
    openClassName?: unknown;
    prefixCls?: unknown;
    mouseEnterDelay?: unknown;
    mouseLeaveDelay?: unknown;
    getPopupContainer?: unknown;
    arrowPointAtCenter?: unknown;
    autoAdjustOverflow?: unknown;
    destroyTooltipOnHide?: unknown;
    align?: unknown;
    builtinPlacements?: unknown;
    children?: unknown;
    onVisibleChange?: unknown;
    'onUpdate:visible'?: unknown;
} & {
    prefixCls: string;
    color: string;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    openClassName: string;
    children: unknown[];
} & {
    title?: any;
    visible?: boolean;
    getPopupContainer?: (...args: any[]) => any;
    trigger?: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
    "onUpdate:visible"?: (...args: any[]) => any;
    defaultVisible?: boolean;
    placement?: "left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    overlayStyle?: import("vue").CSSProperties;
    destroyTooltipOnHide?: boolean;
    onVisibleChange?: (...args: any[]) => any;
    autoAdjustOverflow?: boolean | {
        [key: string]: any;
    };
    arrowPointAtCenter?: boolean;
}> & {
    "onUpdate:visible"?: (...args: any[]) => any;
    onVisibleChange?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], "update:visible" | "visibleChange", {
    prefixCls: string;
    color: string;
    align: {
        [key: string]: any;
    };
    getPopupContainer: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    transitionName: string;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    onVisibleChange: (...args: any[]) => any;
    openClassName: string;
    children: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
