declare var _default: import("vue").DefineComponent<{
    debounce: import("vue-types").VueTypeValidableDef<boolean>;
    elementType: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    height: import("vue-types").VueTypeDef<string | number>;
    offset: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    offsetBottom: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    offsetHorizontal: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    offsetLeft: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    offsetRight: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    offsetTop: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    offsetVertical: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    threshold: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    throttle: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    width: import("vue-types").VueTypeDef<string | number>;
}, any, {
    visible: boolean;
}, {}, {
    getEventNode(): (Window & typeof globalThis) | HTMLElement;
    getOffset(): {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    lazyLoadHandler(): void;
    detachListeners(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    debounce?: unknown;
    elementType?: unknown;
    height?: unknown;
    offset?: unknown;
    offsetBottom?: unknown;
    offsetHorizontal?: unknown;
    offsetLeft?: unknown;
    offsetRight?: unknown;
    offsetTop?: unknown;
    offsetVertical?: unknown;
    threshold?: unknown;
    throttle?: unknown;
    width?: unknown;
} & {
    offset: number;
    offsetTop: number;
    offsetBottom: number;
    elementType: string;
    offsetHorizontal: number;
    offsetLeft: number;
    offsetRight: number;
    offsetVertical: number;
    throttle: number;
    threshold: number;
} & {
    width?: string | number;
    height?: string | number;
    debounce?: boolean;
}>, {
    offset: number;
    offsetTop: number;
    offsetBottom: number;
    elementType: string;
    offsetHorizontal: number;
    offsetLeft: number;
    offsetRight: number;
    offsetVertical: number;
    throttle: number;
    threshold: number;
}>;
export default _default;
