declare const _default: import("vue").DefineComponent<{
    mask: BooleanConstructor;
    mobile: {
        type: import("vue").PropType<import("../interface").MobileConfig>;
    };
    maskAnimation: StringConstructor;
    maskTransitionName: StringConstructor;
    visible: BooleanConstructor;
    prefixCls: StringConstructor;
    zIndex: NumberConstructor;
    destroyPopupOnHide: BooleanConstructor;
    forceRender: BooleanConstructor;
    animation: (ObjectConstructor | StringConstructor)[];
    transitionName: StringConstructor;
    stretch: {
        type: import("vue").PropType<string>;
    };
    align: {
        type: import("vue").PropType<import("../interface").AlignType>;
    };
    point: {
        type: import("vue").PropType<import("../interface").Point>;
    };
    getRootDomNode: {
        type: import("vue").PropType<() => HTMLElement>;
    };
    getClassNameFromAlign: {
        type: import("vue").PropType<(align: import("../interface").AlignType) => string>;
    };
    onMouseenter: {
        type: import("vue").PropType<(align: MouseEvent) => void>;
    };
    onMouseleave: {
        type: import("vue").PropType<(align: MouseEvent) => void>;
    };
    onMousedown: {
        type: import("vue").PropType<(align: MouseEvent) => void>;
    };
    onTouchstart: {
        type: import("vue").PropType<(align: MouseEvent) => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    mask?: unknown;
    mobile?: unknown;
    maskAnimation?: unknown;
    maskTransitionName?: unknown;
    visible?: unknown;
    prefixCls?: unknown;
    zIndex?: unknown;
    destroyPopupOnHide?: unknown;
    forceRender?: unknown;
    animation?: unknown;
    transitionName?: unknown;
    stretch?: unknown;
    align?: unknown;
    point?: unknown;
    getRootDomNode?: unknown;
    getClassNameFromAlign?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
    onMousedown?: unknown;
    onTouchstart?: unknown;
} & {
    visible: boolean;
    mask: boolean;
    destroyPopupOnHide: boolean;
    forceRender: boolean;
} & {
    onMousedown?: (align: MouseEvent) => void;
    onMouseenter?: (align: MouseEvent) => void;
    onMouseleave?: (align: MouseEvent) => void;
    onTouchstart?: (align: MouseEvent) => void;
    prefixCls?: string;
    stretch?: string;
    zIndex?: number;
    animation?: string | Record<string, any>;
    align?: unknown;
    transitionName?: string;
    point?: import("../interface").Point;
    getRootDomNode?: () => HTMLElement;
    getClassNameFromAlign?: (align: import("../interface").AlignType) => string;
    mobile?: unknown;
    maskAnimation?: string;
    maskTransitionName?: string;
}>, {
    visible: boolean;
    mask: boolean;
    destroyPopupOnHide: boolean;
    forceRender: boolean;
}>;
export default _default;
