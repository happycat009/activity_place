import type { Plugin } from 'vue';
import { TabPane } from './src';
export type { TabsProps, TabPaneProps } from './src';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            locale: import("./src/interface").TabsLocale;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            centered: boolean;
        }> & Omit<Readonly<{
            prefixCls?: unknown;
            id?: unknown;
            activeKey?: unknown;
            defaultActiveKey?: unknown;
            direction?: unknown;
            animated?: unknown;
            renderTabBar?: unknown;
            tabBarGutter?: unknown;
            tabBarStyle?: unknown;
            tabPosition?: unknown;
            destroyInactiveTabPane?: unknown;
            hideAdd?: unknown;
            type?: unknown;
            size?: unknown;
            centered?: unknown;
            onEdit?: unknown;
            onChange?: unknown;
            onTabClick?: unknown;
            onTabScroll?: unknown;
            locale?: unknown;
            onPrevClick?: unknown;
            onNextClick?: unknown;
            tabBarExtraContent?: unknown;
        } & {
            locale: import("./src/interface").TabsLocale;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            centered: boolean;
        } & {
            onChange?: (activeKey: import("../_util/type").Key) => void;
            prefixCls?: string;
            size?: import("../config-provider").SizeType;
            direction?: "ltr" | "rtl";
            onEdit?: (e: import("../_util/type").Key | KeyboardEvent | MouseEvent, action: "add" | "remove") => void;
            type?: import("./src/Tabs").TabsType;
            id?: string;
            activeKey?: string | number;
            animated?: unknown;
            tabBarGutter?: number;
            onTabClick?: (activeKey: import("../_util/type").Key, e: KeyboardEvent | MouseEvent) => void;
            tabPosition?: import("./src/interface").TabPosition;
            renderTabBar?: import("./src/interface").RenderTabBar;
            onTabScroll?: import("./src/interface").OnTabScroll;
            tabBarExtraContent?: any;
            defaultActiveKey?: string | number;
            tabBarStyle?: unknown;
            onPrevClick?: Function;
            onNextClick?: Function;
        }> & {
            onChange?: (...args: any[]) => any;
            "onUpdate:activeKey"?: (...args: any[]) => any;
            onTabClick?: (...args: any[]) => any;
            onTabScroll?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "locale" | "destroyInactiveTabPane" | "hideAdd" | "centered">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:activeKey" | "tabClick" | "tabScroll", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls?: unknown;
            id?: unknown;
            activeKey?: unknown;
            defaultActiveKey?: unknown;
            direction?: unknown;
            animated?: unknown;
            renderTabBar?: unknown;
            tabBarGutter?: unknown;
            tabBarStyle?: unknown;
            tabPosition?: unknown;
            destroyInactiveTabPane?: unknown;
            hideAdd?: unknown;
            type?: unknown;
            size?: unknown;
            centered?: unknown;
            onEdit?: unknown;
            onChange?: unknown;
            onTabClick?: unknown;
            onTabScroll?: unknown;
            locale?: unknown;
            onPrevClick?: unknown;
            onNextClick?: unknown;
            tabBarExtraContent?: unknown;
        } & {
            locale: import("./src/interface").TabsLocale;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            centered: boolean;
        } & {
            onChange?: (activeKey: import("../_util/type").Key) => void;
            prefixCls?: string;
            size?: import("../config-provider").SizeType;
            direction?: "ltr" | "rtl";
            onEdit?: (e: import("../_util/type").Key | KeyboardEvent | MouseEvent, action: "add" | "remove") => void;
            type?: import("./src/Tabs").TabsType;
            id?: string;
            activeKey?: string | number;
            animated?: unknown;
            tabBarGutter?: number;
            onTabClick?: (activeKey: import("../_util/type").Key, e: KeyboardEvent | MouseEvent) => void;
            tabPosition?: import("./src/interface").TabPosition;
            renderTabBar?: import("./src/interface").RenderTabBar;
            onTabScroll?: import("./src/interface").OnTabScroll;
            tabBarExtraContent?: any;
            defaultActiveKey?: string | number;
            tabBarStyle?: unknown;
            onPrevClick?: Function;
            onNextClick?: Function;
        }> & {
            onChange?: (...args: any[]) => any;
            "onUpdate:activeKey"?: (...args: any[]) => any;
            onTabClick?: (...args: any[]) => any;
            onTabScroll?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "tabClick" | "tabScroll")[], string, {
            locale: import("./src/interface").TabsLocale;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            centered: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls?: unknown;
        id?: unknown;
        activeKey?: unknown;
        defaultActiveKey?: unknown;
        direction?: unknown;
        animated?: unknown;
        renderTabBar?: unknown;
        tabBarGutter?: unknown;
        tabBarStyle?: unknown;
        tabPosition?: unknown;
        destroyInactiveTabPane?: unknown;
        hideAdd?: unknown;
        type?: unknown;
        size?: unknown;
        centered?: unknown;
        onEdit?: unknown;
        onChange?: unknown;
        onTabClick?: unknown;
        onTabScroll?: unknown;
        locale?: unknown;
        onPrevClick?: unknown;
        onNextClick?: unknown;
        tabBarExtraContent?: unknown;
    } & {
        locale: import("./src/interface").TabsLocale;
        destroyInactiveTabPane: boolean;
        hideAdd: boolean;
        centered: boolean;
    } & {
        onChange?: (activeKey: import("../_util/type").Key) => void;
        prefixCls?: string;
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        onEdit?: (e: import("../_util/type").Key | KeyboardEvent | MouseEvent, action: "add" | "remove") => void;
        type?: import("./src/Tabs").TabsType;
        id?: string;
        activeKey?: string | number;
        animated?: unknown;
        tabBarGutter?: number;
        onTabClick?: (activeKey: import("../_util/type").Key, e: KeyboardEvent | MouseEvent) => void;
        tabPosition?: import("./src/interface").TabPosition;
        renderTabBar?: import("./src/interface").RenderTabBar;
        onTabScroll?: import("./src/interface").OnTabScroll;
        tabBarExtraContent?: any;
        defaultActiveKey?: string | number;
        tabBarStyle?: unknown;
        onPrevClick?: Function;
        onNextClick?: Function;
    }> & {
        onChange?: (...args: any[]) => any;
        "onUpdate:activeKey"?: (...args: any[]) => any;
        onTabClick?: (...args: any[]) => any;
        onTabScroll?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls?: unknown;
    id?: unknown;
    activeKey?: unknown;
    defaultActiveKey?: unknown;
    direction?: unknown;
    animated?: unknown;
    renderTabBar?: unknown;
    tabBarGutter?: unknown;
    tabBarStyle?: unknown;
    tabPosition?: unknown;
    destroyInactiveTabPane?: unknown;
    hideAdd?: unknown;
    type?: unknown;
    size?: unknown;
    centered?: unknown;
    onEdit?: unknown;
    onChange?: unknown;
    onTabClick?: unknown;
    onTabScroll?: unknown;
    locale?: unknown;
    onPrevClick?: unknown;
    onNextClick?: unknown;
    tabBarExtraContent?: unknown;
} & {
    locale: import("./src/interface").TabsLocale;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    centered: boolean;
} & {
    onChange?: (activeKey: import("../_util/type").Key) => void;
    prefixCls?: string;
    size?: import("../config-provider").SizeType;
    direction?: "ltr" | "rtl";
    onEdit?: (e: import("../_util/type").Key | KeyboardEvent | MouseEvent, action: "add" | "remove") => void;
    type?: import("./src/Tabs").TabsType;
    id?: string;
    activeKey?: string | number;
    animated?: unknown;
    tabBarGutter?: number;
    onTabClick?: (activeKey: import("../_util/type").Key, e: KeyboardEvent | MouseEvent) => void;
    tabPosition?: import("./src/interface").TabPosition;
    renderTabBar?: import("./src/interface").RenderTabBar;
    onTabScroll?: import("./src/interface").OnTabScroll;
    tabBarExtraContent?: any;
    defaultActiveKey?: string | number;
    tabBarStyle?: unknown;
    onPrevClick?: Function;
    onNextClick?: Function;
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:activeKey"?: (...args: any[]) => any;
    onTabClick?: (...args: any[]) => any;
    onTabScroll?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "tabClick" | "tabScroll")[], "change" | "update:activeKey" | "tabClick" | "tabScroll", {
    locale: import("./src/interface").TabsLocale;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    centered: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly TabPane: typeof TabPane;
};
export default _default;
export { TabPane };
