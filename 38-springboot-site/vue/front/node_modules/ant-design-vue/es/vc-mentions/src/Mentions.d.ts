import type { ExtractPropTypes } from 'vue';
import { vcMentionsProps } from './mentionsProps';
export declare type MentionsProps = Partial<ExtractPropTypes<typeof vcMentionsProps>>;
declare const _default: import("vue").DefineComponent<{
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    prefix: import("vue-types").VueTypeDef<string | string[]>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    split: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottom" | "top">;
    character: import("vue-types").VueTypeValidableDef<any>;
    characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    filterOption: {
        type: import("vue").PropType<false | typeof import("./util").filterOption>;
    };
    validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: {
        type: import("vue").PropType<() => HTMLElement>;
    };
    options: {
        type: import("vue").PropType<Partial<{
            value?: unknown;
            disabled?: unknown;
            label?: unknown;
        } & {
            disabled: boolean;
        } & {
            label?: string | number | Function;
            value?: string;
        }>>;
        default: () => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    rows: (NumberConstructor | StringConstructor)[];
    direction: {
        type: import("vue").PropType<import("./mentionsProps").Direction>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select" | "search" | "blur" | "change" | "focus" | "pressenter")[], "search" | "select" | "blur" | "change" | "focus" | "pressenter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    autofocus?: unknown;
    prefix?: unknown;
    prefixCls?: unknown;
    value?: unknown;
    disabled?: unknown;
    split?: unknown;
    transitionName?: unknown;
    placement?: unknown;
    character?: unknown;
    characterRender?: unknown;
    filterOption?: unknown;
    validateSearch?: unknown;
    getPopupContainer?: unknown;
    options?: unknown;
    loading?: unknown;
    rows?: unknown;
    direction?: unknown;
} & {
    split: string;
    prefixCls: string;
    value: string;
    transitionName: string;
} & {
    direction?: import("./mentionsProps").Direction;
    disabled?: boolean;
    loading?: boolean;
    getPopupContainer?: () => HTMLElement;
    autofocus?: boolean;
    options?: any;
    placement?: "bottom" | "top";
    prefix?: string | string[];
    filterOption?: false | typeof import("./util").filterOption;
    rows?: string | number;
    character?: any;
    characterRender?: (...args: any[]) => any;
    validateSearch?: (...args: any[]) => any;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onSelect?: (...args: any[]) => any;
    onSearch?: (...args: any[]) => any;
    onPressenter?: (...args: any[]) => any;
}, {
    split: string;
    prefixCls: string;
    value: string;
    transitionName: string;
    options: any;
    characterRender: (...args: any[]) => any;
    validateSearch: (...args: any[]) => any;
}>;
export default _default;
