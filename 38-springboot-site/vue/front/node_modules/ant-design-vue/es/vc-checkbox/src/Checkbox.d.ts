declare var _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    type: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultChecked: import("vue-types").VueTypeDef<number | boolean>;
    checked: import("vue-types").VueTypeDef<number | boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    tabindex: import("vue-types").VueTypeDef<string | number>;
    readonly: import("vue-types").VueTypeValidableDef<boolean>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    value: import("vue-types").VueTypeValidableDef<any>;
}, any, {
    sChecked: number | boolean;
}, {}, {
    focus(): void;
    blur(): void;
    handleChange(e: any): void;
    onClick(e: any): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls?: unknown;
    name?: unknown;
    id?: unknown;
    type?: unknown;
    defaultChecked?: unknown;
    checked?: unknown;
    disabled?: unknown;
    tabindex?: unknown;
    readonly?: unknown;
    autofocus?: unknown;
    value?: unknown;
} & {
    prefixCls: string;
    name: string;
    type: string;
    id: string;
} & {
    disabled?: boolean;
    value?: any;
    tabindex?: string | number;
    checked?: number | boolean;
    autofocus?: boolean;
    defaultChecked?: number | boolean;
    readonly?: boolean;
}>, {
    prefixCls: string;
    name: string;
    type: string;
    id: string;
}>;
export default _default;
