import type { Plugin } from 'vue';
import Meta from './Meta';
import Grid from './Grid';
export type { CardProps } from './Card';
export { Meta as CardMeta, Grid as CardGrid };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        }> & Omit<Readonly<{
            prefixCls?: unknown;
            title?: unknown;
            extra?: unknown;
            bordered?: unknown;
            bodyStyle?: unknown;
            headStyle?: unknown;
            loading?: unknown;
            hoverable?: unknown;
            type?: unknown;
            size?: unknown;
            actions?: unknown;
            tabList?: unknown;
            tabBarExtraContent?: unknown;
            activeTabKey?: unknown;
            defaultActiveTabKey?: unknown;
            cover?: unknown;
            onTabChange?: unknown;
        } & {
            prefixCls: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        } & {
            title?: any;
            cover?: any;
            size?: import("./Card").CardSize;
            type?: "inner";
            extra?: any;
            tabBarExtraContent?: any;
            bodyStyle?: import("vue").CSSProperties;
            headStyle?: import("vue").CSSProperties;
            actions?: any;
            tabList?: import("./Card").CardTabListType[];
            onTabChange?: (key: string) => void;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "loading" | "bordered" | "hoverable" | "activeTabKey" | "defaultActiveTabKey">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls?: unknown;
            title?: unknown;
            extra?: unknown;
            bordered?: unknown;
            bodyStyle?: unknown;
            headStyle?: unknown;
            loading?: unknown;
            hoverable?: unknown;
            type?: unknown;
            size?: unknown;
            actions?: unknown;
            tabList?: unknown;
            tabBarExtraContent?: unknown;
            activeTabKey?: unknown;
            defaultActiveTabKey?: unknown;
            cover?: unknown;
            onTabChange?: unknown;
        } & {
            prefixCls: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        } & {
            title?: any;
            cover?: any;
            size?: import("./Card").CardSize;
            type?: "inner";
            extra?: any;
            tabBarExtraContent?: any;
            bodyStyle?: import("vue").CSSProperties;
            headStyle?: import("vue").CSSProperties;
            actions?: any;
            tabList?: import("./Card").CardTabListType[];
            onTabChange?: (key: string) => void;
        }>, () => JSX.Element, unknown, {}, {}, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls?: unknown;
        title?: unknown;
        extra?: unknown;
        bordered?: unknown;
        bodyStyle?: unknown;
        headStyle?: unknown;
        loading?: unknown;
        hoverable?: unknown;
        type?: unknown;
        size?: unknown;
        actions?: unknown;
        tabList?: unknown;
        tabBarExtraContent?: unknown;
        activeTabKey?: unknown;
        defaultActiveTabKey?: unknown;
        cover?: unknown;
        onTabChange?: unknown;
    } & {
        prefixCls: string;
        loading: boolean;
        bordered: boolean;
        hoverable: boolean;
        activeTabKey: string;
        defaultActiveTabKey: string;
    } & {
        title?: any;
        cover?: any;
        size?: import("./Card").CardSize;
        type?: "inner";
        extra?: any;
        tabBarExtraContent?: any;
        bodyStyle?: import("vue").CSSProperties;
        headStyle?: import("vue").CSSProperties;
        actions?: any;
        tabList?: import("./Card").CardTabListType[];
        onTabChange?: (key: string) => void;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls?: unknown;
    title?: unknown;
    extra?: unknown;
    bordered?: unknown;
    bodyStyle?: unknown;
    headStyle?: unknown;
    loading?: unknown;
    hoverable?: unknown;
    type?: unknown;
    size?: unknown;
    actions?: unknown;
    tabList?: unknown;
    tabBarExtraContent?: unknown;
    activeTabKey?: unknown;
    defaultActiveTabKey?: unknown;
    cover?: unknown;
    onTabChange?: unknown;
} & {
    prefixCls: string;
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    activeTabKey: string;
    defaultActiveTabKey: string;
} & {
    title?: any;
    cover?: any;
    size?: import("./Card").CardSize;
    type?: "inner";
    extra?: any;
    tabBarExtraContent?: any;
    bodyStyle?: import("vue").CSSProperties;
    headStyle?: import("vue").CSSProperties;
    actions?: any;
    tabList?: import("./Card").CardTabListType[];
    onTabChange?: (key: string) => void;
}>, () => JSX.Element, unknown, {}, {}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    activeTabKey: string;
    defaultActiveTabKey: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Meta: typeof Meta;
    readonly Grid: typeof Grid;
};
export default _default;
