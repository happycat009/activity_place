import type { Moment } from 'moment';
import type { App } from 'vue';
import type { PickerProps, PickerDateProps, RangePickerProps as BaseRangePickerProps } from './generatePicker';
import type { ExtraDatePickerProps, ExtraRangePickerProps } from './generatePicker/props';
export declare type DatePickerProps = PickerProps<Moment> & ExtraDatePickerProps<Moment>;
export declare type MonthPickerProps = Omit<PickerDateProps<Moment>, 'picker'> & ExtraDatePickerProps<Moment>;
export declare type WeekPickerProps = Omit<PickerDateProps<Moment>, 'picker'> & ExtraDatePickerProps<Moment>;
export declare type RangePickerProps = BaseRangePickerProps<Moment> & ExtraRangePickerProps<Moment>;
declare const WeekPicker: import("vue").DefineComponent<{
    defaultPickerValue: {
        type: import("vue").PropType<string | Moment>;
    };
    defaultValue: {
        type: import("vue").PropType<string | Moment>;
    };
    value: {
        type: import("vue").PropType<string | Moment>;
    };
    disabledTime: {
        type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
    };
    format: {
        type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
    };
    renderExtraFooter: {
        type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
    };
    showNow: {
        type: BooleanConstructor;
        default: any;
    };
    monthCellRender: {
        type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
    };
    monthCellContentRender: {
        type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
    };
    id: StringConstructor;
    dropdownClassName: StringConstructor;
    dropdownAlign: {
        type: import("vue").PropType<import("../vc-align/interface").AlignType>;
    };
    popupStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    transitionName: StringConstructor;
    placeholder: StringConstructor;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: {
        type: BooleanConstructor;
        default: any;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    tabindex: NumberConstructor;
    open: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    inputReadOnly: {
        type: BooleanConstructor;
        default: any;
    };
    getPopupContainer: {
        type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
    };
    panelRender: {
        type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
    };
    role: StringConstructor;
    name: StringConstructor;
    autocomplete: StringConstructor;
    direction: {
        type: import("vue").PropType<"ltr" | "rtl">;
    };
    showToday: {
        type: BooleanConstructor;
        default: any;
    };
    showTime: {
        type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
        default: any;
    };
    locale: {
        type: import("vue").PropType<import("./generatePicker").PickerLocale>;
    };
    size: {
        type: import("vue").PropType<import("../config-provider").SizeType>;
    };
    bordered: {
        type: BooleanConstructor;
        default: any;
    };
    dateRender: {
        type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
    };
    disabledDate: {
        type: import("vue").PropType<(date: Moment) => boolean>;
    };
    mode: {
        type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
    };
    picker: {
        type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
    };
    valueFormat: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    defaultPickerValue?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    disabledTime?: unknown;
    format?: unknown;
    renderExtraFooter?: unknown;
    showNow?: unknown;
    monthCellRender?: unknown;
    monthCellContentRender?: unknown;
    id?: unknown;
    dropdownClassName?: unknown;
    dropdownAlign?: unknown;
    popupStyle?: unknown;
    transitionName?: unknown;
    placeholder?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    disabled?: unknown;
    tabindex?: unknown;
    open?: unknown;
    defaultOpen?: unknown;
    inputReadOnly?: unknown;
    getPopupContainer?: unknown;
    panelRender?: unknown;
    role?: unknown;
    name?: unknown;
    autocomplete?: unknown;
    direction?: unknown;
    showToday?: unknown;
    showTime?: unknown;
    locale?: unknown;
    size?: unknown;
    bordered?: unknown;
    dateRender?: unknown;
    disabledDate?: unknown;
    mode?: unknown;
    picker?: unknown;
    valueFormat?: unknown;
} & {} & {
    size?: import("../config-provider").SizeType;
    direction?: "ltr" | "rtl";
    open?: boolean;
    disabled?: boolean;
    disabledDate?: (date: Moment) => boolean;
    picker?: import("../vc-picker/interface").PickerMode;
    mode?: import("../vc-picker/interface").PanelMode;
    locale?: import("./generatePicker").PickerLocale;
    format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
    value?: string | Moment;
    name?: string;
    role?: string;
    tabindex?: number;
    getPopupContainer?: (node: HTMLElement) => HTMLElement;
    autocomplete?: string;
    dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
    defaultPickerValue?: string | Moment;
    defaultValue?: string | Moment;
    disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
    showTime?: any;
    monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    showNow?: boolean;
    renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
    showToday?: boolean;
    transitionName?: string;
    popupStyle?: unknown;
    dropdownClassName?: string;
    dropdownAlign?: unknown;
    placeholder?: string;
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    inputReadOnly?: boolean;
    id?: string;
    panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
    monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    bordered?: boolean;
    valueFormat?: string;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onPanelChange?: (...args: any[]) => any;
    onOk?: (...args: any[]) => any;
    onOpenChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onUpdate:open"?: (...args: any[]) => any;
}, {
    open: boolean;
    disabled: boolean;
    showTime: any;
    showNow: boolean;
    showToday: boolean;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    inputReadOnly: boolean;
    bordered: boolean;
}>, MonthPicker: import("vue").DefineComponent<{
    defaultPickerValue: {
        type: import("vue").PropType<string | Moment>;
    };
    defaultValue: {
        type: import("vue").PropType<string | Moment>;
    };
    value: {
        type: import("vue").PropType<string | Moment>;
    };
    disabledTime: {
        type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
    };
    format: {
        type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
    };
    renderExtraFooter: {
        type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
    };
    showNow: {
        type: BooleanConstructor;
        default: any;
    };
    monthCellRender: {
        type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
    };
    monthCellContentRender: {
        type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
    };
    id: StringConstructor;
    dropdownClassName: StringConstructor;
    dropdownAlign: {
        type: import("vue").PropType<import("../vc-align/interface").AlignType>;
    };
    popupStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    transitionName: StringConstructor;
    placeholder: StringConstructor;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: {
        type: BooleanConstructor;
        default: any;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    tabindex: NumberConstructor;
    open: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    inputReadOnly: {
        type: BooleanConstructor;
        default: any;
    };
    getPopupContainer: {
        type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
    };
    panelRender: {
        type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
    };
    role: StringConstructor;
    name: StringConstructor;
    autocomplete: StringConstructor;
    direction: {
        type: import("vue").PropType<"ltr" | "rtl">;
    };
    showToday: {
        type: BooleanConstructor;
        default: any;
    };
    showTime: {
        type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
        default: any;
    };
    locale: {
        type: import("vue").PropType<import("./generatePicker").PickerLocale>;
    };
    size: {
        type: import("vue").PropType<import("../config-provider").SizeType>;
    };
    bordered: {
        type: BooleanConstructor;
        default: any;
    };
    dateRender: {
        type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
    };
    disabledDate: {
        type: import("vue").PropType<(date: Moment) => boolean>;
    };
    mode: {
        type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
    };
    picker: {
        type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
    };
    valueFormat: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    defaultPickerValue?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    disabledTime?: unknown;
    format?: unknown;
    renderExtraFooter?: unknown;
    showNow?: unknown;
    monthCellRender?: unknown;
    monthCellContentRender?: unknown;
    id?: unknown;
    dropdownClassName?: unknown;
    dropdownAlign?: unknown;
    popupStyle?: unknown;
    transitionName?: unknown;
    placeholder?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    disabled?: unknown;
    tabindex?: unknown;
    open?: unknown;
    defaultOpen?: unknown;
    inputReadOnly?: unknown;
    getPopupContainer?: unknown;
    panelRender?: unknown;
    role?: unknown;
    name?: unknown;
    autocomplete?: unknown;
    direction?: unknown;
    showToday?: unknown;
    showTime?: unknown;
    locale?: unknown;
    size?: unknown;
    bordered?: unknown;
    dateRender?: unknown;
    disabledDate?: unknown;
    mode?: unknown;
    picker?: unknown;
    valueFormat?: unknown;
} & {} & {
    size?: import("../config-provider").SizeType;
    direction?: "ltr" | "rtl";
    open?: boolean;
    disabled?: boolean;
    disabledDate?: (date: Moment) => boolean;
    picker?: import("../vc-picker/interface").PickerMode;
    mode?: import("../vc-picker/interface").PanelMode;
    locale?: import("./generatePicker").PickerLocale;
    format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
    value?: string | Moment;
    name?: string;
    role?: string;
    tabindex?: number;
    getPopupContainer?: (node: HTMLElement) => HTMLElement;
    autocomplete?: string;
    dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
    defaultPickerValue?: string | Moment;
    defaultValue?: string | Moment;
    disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
    showTime?: any;
    monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    showNow?: boolean;
    renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
    showToday?: boolean;
    transitionName?: string;
    popupStyle?: unknown;
    dropdownClassName?: string;
    dropdownAlign?: unknown;
    placeholder?: string;
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    inputReadOnly?: boolean;
    id?: string;
    panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
    monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    bordered?: boolean;
    valueFormat?: string;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onPanelChange?: (...args: any[]) => any;
    onOk?: (...args: any[]) => any;
    onOpenChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onUpdate:open"?: (...args: any[]) => any;
}, {
    open: boolean;
    disabled: boolean;
    showTime: any;
    showNow: boolean;
    showToday: boolean;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    inputReadOnly: boolean;
    bordered: boolean;
}>, QuarterPicker: import("vue").DefineComponent<{
    defaultPickerValue: {
        type: import("vue").PropType<string | Moment>;
    };
    defaultValue: {
        type: import("vue").PropType<string | Moment>;
    };
    value: {
        type: import("vue").PropType<string | Moment>;
    };
    disabledTime: {
        type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
    };
    format: {
        type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
    };
    renderExtraFooter: {
        type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
    };
    showNow: {
        type: BooleanConstructor;
        default: any;
    };
    monthCellRender: {
        type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
    };
    monthCellContentRender: {
        type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
    };
    id: StringConstructor;
    dropdownClassName: StringConstructor;
    dropdownAlign: {
        type: import("vue").PropType<import("../vc-align/interface").AlignType>;
    };
    popupStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    transitionName: StringConstructor;
    placeholder: StringConstructor;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: {
        type: BooleanConstructor;
        default: any;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    tabindex: NumberConstructor;
    open: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    inputReadOnly: {
        type: BooleanConstructor;
        default: any;
    };
    getPopupContainer: {
        type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
    };
    panelRender: {
        type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
    };
    role: StringConstructor;
    name: StringConstructor;
    autocomplete: StringConstructor;
    direction: {
        type: import("vue").PropType<"ltr" | "rtl">;
    };
    showToday: {
        type: BooleanConstructor;
        default: any;
    };
    showTime: {
        type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
        default: any;
    };
    locale: {
        type: import("vue").PropType<import("./generatePicker").PickerLocale>;
    };
    size: {
        type: import("vue").PropType<import("../config-provider").SizeType>;
    };
    bordered: {
        type: BooleanConstructor;
        default: any;
    };
    dateRender: {
        type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
    };
    disabledDate: {
        type: import("vue").PropType<(date: Moment) => boolean>;
    };
    mode: {
        type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
    };
    picker: {
        type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
    };
    valueFormat: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    defaultPickerValue?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    disabledTime?: unknown;
    format?: unknown;
    renderExtraFooter?: unknown;
    showNow?: unknown;
    monthCellRender?: unknown;
    monthCellContentRender?: unknown;
    id?: unknown;
    dropdownClassName?: unknown;
    dropdownAlign?: unknown;
    popupStyle?: unknown;
    transitionName?: unknown;
    placeholder?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    disabled?: unknown;
    tabindex?: unknown;
    open?: unknown;
    defaultOpen?: unknown;
    inputReadOnly?: unknown;
    getPopupContainer?: unknown;
    panelRender?: unknown;
    role?: unknown;
    name?: unknown;
    autocomplete?: unknown;
    direction?: unknown;
    showToday?: unknown;
    showTime?: unknown;
    locale?: unknown;
    size?: unknown;
    bordered?: unknown;
    dateRender?: unknown;
    disabledDate?: unknown;
    mode?: unknown;
    picker?: unknown;
    valueFormat?: unknown;
} & {} & {
    size?: import("../config-provider").SizeType;
    direction?: "ltr" | "rtl";
    open?: boolean;
    disabled?: boolean;
    disabledDate?: (date: Moment) => boolean;
    picker?: import("../vc-picker/interface").PickerMode;
    mode?: import("../vc-picker/interface").PanelMode;
    locale?: import("./generatePicker").PickerLocale;
    format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
    value?: string | Moment;
    name?: string;
    role?: string;
    tabindex?: number;
    getPopupContainer?: (node: HTMLElement) => HTMLElement;
    autocomplete?: string;
    dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
    defaultPickerValue?: string | Moment;
    defaultValue?: string | Moment;
    disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
    showTime?: any;
    monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    showNow?: boolean;
    renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
    showToday?: boolean;
    transitionName?: string;
    popupStyle?: unknown;
    dropdownClassName?: string;
    dropdownAlign?: unknown;
    placeholder?: string;
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    inputReadOnly?: boolean;
    id?: string;
    panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
    monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    bordered?: boolean;
    valueFormat?: string;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onPanelChange?: (...args: any[]) => any;
    onOk?: (...args: any[]) => any;
    onOpenChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onUpdate:open"?: (...args: any[]) => any;
}, {
    open: boolean;
    disabled: boolean;
    showTime: any;
    showNow: boolean;
    showToday: boolean;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    inputReadOnly: boolean;
    bordered: boolean;
}>, RangePicker: import("vue").DefineComponent<{
    allowEmpty: {
        type: import("vue").PropType<[boolean, boolean]>;
    };
    dateRender: {
        type: import("vue").PropType<import("../vc-picker/RangePicker").RangeDateRender<Moment>>;
    };
    defaultPickerValue: {
        type: import("vue").PropType<[string, string] | [Moment, Moment]>;
    };
    defaultValue: {
        type: import("vue").PropType<[string, string] | [Moment, Moment]>;
    };
    value: {
        type: import("vue").PropType<[string, string] | [Moment, Moment]>;
    };
    disabledTime: {
        type: import("vue").PropType<(date: Moment, type: import("../vc-picker/RangePicker").RangeType) => import("../vc-picker/interface").DisabledTimes>;
    };
    disabled: {
        type: import("vue").PropType<boolean | [boolean, boolean]>;
    };
    format: StringConstructor;
    renderExtraFooter: {
        type: import("vue").PropType<() => import("../_util/type").VueNode>;
    };
    separator: {
        type: StringConstructor;
    };
    ranges: {
        type: import("vue").PropType<Record<string, [Moment, Moment] | (() => [Moment, Moment])>>;
    };
    placeholder: ArrayConstructor;
    mode: {
        type: import("vue").PropType<[import("../vc-picker/interface").PanelMode, import("../vc-picker/interface").PanelMode]>;
    };
    id: StringConstructor;
    dropdownClassName: StringConstructor;
    dropdownAlign: {
        type: import("vue").PropType<import("../vc-align/interface").AlignType>;
    };
    popupStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    transitionName: StringConstructor;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: {
        type: BooleanConstructor;
        default: any;
    };
    tabindex: NumberConstructor;
    open: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    inputReadOnly: {
        type: BooleanConstructor;
        default: any;
    };
    getPopupContainer: {
        type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
    };
    panelRender: {
        type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
    };
    role: StringConstructor;
    name: StringConstructor;
    autocomplete: StringConstructor;
    direction: {
        type: import("vue").PropType<"ltr" | "rtl">;
    };
    showToday: {
        type: BooleanConstructor;
        default: any;
    };
    showTime: {
        type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
        default: any;
    };
    locale: {
        type: import("vue").PropType<import("./generatePicker").PickerLocale>;
    };
    size: {
        type: import("vue").PropType<import("../config-provider").SizeType>;
    };
    bordered: {
        type: BooleanConstructor;
        default: any;
    };
    disabledDate: {
        type: import("vue").PropType<(date: Moment) => boolean>;
    };
    picker: {
        type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
    };
    valueFormat: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open" | "calendarChange")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open" | "calendarChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    allowEmpty?: unknown;
    dateRender?: unknown;
    defaultPickerValue?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    disabledTime?: unknown;
    disabled?: unknown;
    format?: unknown;
    renderExtraFooter?: unknown;
    separator?: unknown;
    ranges?: unknown;
    placeholder?: unknown;
    mode?: unknown;
    id?: unknown;
    dropdownClassName?: unknown;
    dropdownAlign?: unknown;
    popupStyle?: unknown;
    transitionName?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    tabindex?: unknown;
    open?: unknown;
    defaultOpen?: unknown;
    inputReadOnly?: unknown;
    getPopupContainer?: unknown;
    panelRender?: unknown;
    role?: unknown;
    name?: unknown;
    autocomplete?: unknown;
    direction?: unknown;
    showToday?: unknown;
    showTime?: unknown;
    locale?: unknown;
    size?: unknown;
    bordered?: unknown;
    disabledDate?: unknown;
    picker?: unknown;
    valueFormat?: unknown;
} & {} & {
    size?: import("../config-provider").SizeType;
    direction?: "ltr" | "rtl";
    open?: boolean;
    separator?: string;
    disabled?: boolean | [boolean, boolean];
    disabledDate?: (date: Moment) => boolean;
    picker?: import("../vc-picker/interface").PickerMode;
    mode?: [import("../vc-picker/interface").PanelMode, import("../vc-picker/interface").PanelMode];
    locale?: import("./generatePicker").PickerLocale;
    format?: string;
    value?: [string, string] | [Moment, Moment];
    name?: string;
    role?: string;
    tabindex?: number;
    getPopupContainer?: (node: HTMLElement) => HTMLElement;
    autocomplete?: string;
    dateRender?: import("../vc-picker/RangePicker").RangeDateRender<Moment>;
    defaultPickerValue?: [string, string] | [Moment, Moment];
    defaultValue?: [string, string] | [Moment, Moment];
    disabledTime?: (date: Moment, type: import("../vc-picker/RangePicker").RangeType) => import("../vc-picker/interface").DisabledTimes;
    showTime?: any;
    renderExtraFooter?: () => import("../_util/type").VueNode;
    showToday?: boolean;
    transitionName?: string;
    popupStyle?: unknown;
    dropdownClassName?: string;
    dropdownAlign?: unknown;
    placeholder?: unknown[];
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    inputReadOnly?: boolean;
    id?: string;
    panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
    ranges?: Record<string, [Moment, Moment] | (() => [Moment, Moment])>;
    allowEmpty?: [boolean, boolean];
    bordered?: boolean;
    valueFormat?: string;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onPanelChange?: (...args: any[]) => any;
    onOk?: (...args: any[]) => any;
    onOpenChange?: (...args: any[]) => any;
    onCalendarChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onUpdate:open"?: (...args: any[]) => any;
}, {
    open: boolean;
    showTime: any;
    showToday: boolean;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    inputReadOnly: boolean;
    bordered: boolean;
}>;
export { RangePicker, WeekPicker, MonthPicker, QuarterPicker };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            open: boolean;
            disabled: boolean;
            showTime: any;
            showNow: boolean;
            showToday: boolean;
            allowClear: boolean;
            autofocus: boolean;
            defaultOpen: boolean;
            inputReadOnly: boolean;
            bordered: boolean;
        }> & Omit<Readonly<{
            defaultPickerValue?: unknown;
            defaultValue?: unknown;
            value?: unknown;
            disabledTime?: unknown;
            format?: unknown;
            renderExtraFooter?: unknown;
            showNow?: unknown;
            monthCellRender?: unknown;
            monthCellContentRender?: unknown;
            id?: unknown;
            dropdownClassName?: unknown;
            dropdownAlign?: unknown;
            popupStyle?: unknown;
            transitionName?: unknown;
            placeholder?: unknown;
            allowClear?: unknown;
            autofocus?: unknown;
            disabled?: unknown;
            tabindex?: unknown;
            open?: unknown;
            defaultOpen?: unknown;
            inputReadOnly?: unknown;
            getPopupContainer?: unknown;
            panelRender?: unknown;
            role?: unknown;
            name?: unknown;
            autocomplete?: unknown;
            direction?: unknown;
            showToday?: unknown;
            showTime?: unknown;
            locale?: unknown;
            size?: unknown;
            bordered?: unknown;
            dateRender?: unknown;
            disabledDate?: unknown;
            mode?: unknown;
            picker?: unknown;
            valueFormat?: unknown;
        } & {} & {
            size?: import("../config-provider").SizeType;
            direction?: "ltr" | "rtl";
            open?: boolean;
            disabled?: boolean;
            disabledDate?: (date: Moment) => boolean;
            picker?: import("../vc-picker/interface").PickerMode;
            mode?: import("../vc-picker/interface").PanelMode;
            locale?: import("./generatePicker").PickerLocale;
            format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
            value?: string | Moment;
            name?: string;
            role?: string;
            tabindex?: number;
            getPopupContainer?: (node: HTMLElement) => HTMLElement;
            autocomplete?: string;
            dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
            defaultPickerValue?: string | Moment;
            defaultValue?: string | Moment;
            disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
            showTime?: any;
            monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
            showNow?: boolean;
            renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
            showToday?: boolean;
            transitionName?: string;
            popupStyle?: unknown;
            dropdownClassName?: string;
            dropdownAlign?: unknown;
            placeholder?: string;
            allowClear?: boolean;
            autofocus?: boolean;
            defaultOpen?: boolean;
            inputReadOnly?: boolean;
            id?: string;
            panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
            monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
            bordered?: boolean;
            valueFormat?: string;
        }> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onPanelChange?: (...args: any[]) => any;
            onOk?: (...args: any[]) => any;
            onOpenChange?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
            "onUpdate:open"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "open" | "disabled" | "showTime" | "showNow" | "showToday" | "allowClear" | "autofocus" | "defaultOpen" | "inputReadOnly" | "bordered">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            defaultPickerValue?: unknown;
            defaultValue?: unknown;
            value?: unknown;
            disabledTime?: unknown;
            format?: unknown;
            renderExtraFooter?: unknown;
            showNow?: unknown;
            monthCellRender?: unknown;
            monthCellContentRender?: unknown;
            id?: unknown;
            dropdownClassName?: unknown;
            dropdownAlign?: unknown;
            popupStyle?: unknown;
            transitionName?: unknown;
            placeholder?: unknown;
            allowClear?: unknown;
            autofocus?: unknown;
            disabled?: unknown;
            tabindex?: unknown;
            open?: unknown;
            defaultOpen?: unknown;
            inputReadOnly?: unknown;
            getPopupContainer?: unknown;
            panelRender?: unknown;
            role?: unknown;
            name?: unknown;
            autocomplete?: unknown;
            direction?: unknown;
            showToday?: unknown;
            showTime?: unknown;
            locale?: unknown;
            size?: unknown;
            bordered?: unknown;
            dateRender?: unknown;
            disabledDate?: unknown;
            mode?: unknown;
            picker?: unknown;
            valueFormat?: unknown;
        } & {} & {
            size?: import("../config-provider").SizeType;
            direction?: "ltr" | "rtl";
            open?: boolean;
            disabled?: boolean;
            disabledDate?: (date: Moment) => boolean;
            picker?: import("../vc-picker/interface").PickerMode;
            mode?: import("../vc-picker/interface").PanelMode;
            locale?: import("./generatePicker").PickerLocale;
            format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
            value?: string | Moment;
            name?: string;
            role?: string;
            tabindex?: number;
            getPopupContainer?: (node: HTMLElement) => HTMLElement;
            autocomplete?: string;
            dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
            defaultPickerValue?: string | Moment;
            defaultValue?: string | Moment;
            disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
            showTime?: any;
            monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
            showNow?: boolean;
            renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
            showToday?: boolean;
            transitionName?: string;
            popupStyle?: unknown;
            dropdownClassName?: string;
            dropdownAlign?: unknown;
            placeholder?: string;
            allowClear?: boolean;
            autofocus?: boolean;
            defaultOpen?: boolean;
            inputReadOnly?: boolean;
            id?: string;
            panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
            monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
            bordered?: boolean;
            valueFormat?: string;
        }> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onPanelChange?: (...args: any[]) => any;
            onOk?: (...args: any[]) => any;
            onOpenChange?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
            "onUpdate:open"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], string, {
            open: boolean;
            disabled: boolean;
            showTime: any;
            showNow: boolean;
            showToday: boolean;
            allowClear: boolean;
            autofocus: boolean;
            defaultOpen: boolean;
            inputReadOnly: boolean;
            bordered: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        showNow?: unknown;
        monthCellRender?: unknown;
        monthCellContentRender?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        dateRender?: unknown;
        disabledDate?: unknown;
        mode?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        disabled?: boolean;
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: import("../vc-picker/interface").PanelMode;
        locale?: import("./generatePicker").PickerLocale;
        format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
        value?: string | Moment;
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
        defaultPickerValue?: string | Moment;
        defaultValue?: string | Moment;
        disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
        showTime?: any;
        monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        showNow?: boolean;
        renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: string;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    defaultPickerValue?: unknown;
    defaultValue?: unknown;
    value?: unknown;
    disabledTime?: unknown;
    format?: unknown;
    renderExtraFooter?: unknown;
    showNow?: unknown;
    monthCellRender?: unknown;
    monthCellContentRender?: unknown;
    id?: unknown;
    dropdownClassName?: unknown;
    dropdownAlign?: unknown;
    popupStyle?: unknown;
    transitionName?: unknown;
    placeholder?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    disabled?: unknown;
    tabindex?: unknown;
    open?: unknown;
    defaultOpen?: unknown;
    inputReadOnly?: unknown;
    getPopupContainer?: unknown;
    panelRender?: unknown;
    role?: unknown;
    name?: unknown;
    autocomplete?: unknown;
    direction?: unknown;
    showToday?: unknown;
    showTime?: unknown;
    locale?: unknown;
    size?: unknown;
    bordered?: unknown;
    dateRender?: unknown;
    disabledDate?: unknown;
    mode?: unknown;
    picker?: unknown;
    valueFormat?: unknown;
} & {} & {
    size?: import("../config-provider").SizeType;
    direction?: "ltr" | "rtl";
    open?: boolean;
    disabled?: boolean;
    disabledDate?: (date: Moment) => boolean;
    picker?: import("../vc-picker/interface").PickerMode;
    mode?: import("../vc-picker/interface").PanelMode;
    locale?: import("./generatePicker").PickerLocale;
    format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
    value?: string | Moment;
    name?: string;
    role?: string;
    tabindex?: number;
    getPopupContainer?: (node: HTMLElement) => HTMLElement;
    autocomplete?: string;
    dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
    defaultPickerValue?: string | Moment;
    defaultValue?: string | Moment;
    disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
    showTime?: any;
    monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    showNow?: boolean;
    renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
    showToday?: boolean;
    transitionName?: string;
    popupStyle?: unknown;
    dropdownClassName?: string;
    dropdownAlign?: unknown;
    placeholder?: string;
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    inputReadOnly?: boolean;
    id?: string;
    panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
    monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
    bordered?: boolean;
    valueFormat?: string;
}> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onPanelChange?: (...args: any[]) => any;
    onOk?: (...args: any[]) => any;
    onOpenChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onUpdate:open"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", {
    open: boolean;
    disabled: boolean;
    showTime: any;
    showNow: boolean;
    showToday: boolean;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    inputReadOnly: boolean;
    bordered: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    WeekPicker: import("vue").DefineComponent<{
        defaultPickerValue: {
            type: import("vue").PropType<string | Moment>;
        };
        defaultValue: {
            type: import("vue").PropType<string | Moment>;
        };
        value: {
            type: import("vue").PropType<string | Moment>;
        };
        disabledTime: {
            type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
        };
        format: {
            type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
        };
        renderExtraFooter: {
            type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
        };
        showNow: {
            type: BooleanConstructor;
            default: any;
        };
        monthCellRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        monthCellContentRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        id: StringConstructor;
        dropdownClassName: StringConstructor;
        dropdownAlign: {
            type: import("vue").PropType<import("../vc-align/interface").AlignType>;
        };
        popupStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        transitionName: StringConstructor;
        placeholder: StringConstructor;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        autofocus: {
            type: BooleanConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        tabindex: NumberConstructor;
        open: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        inputReadOnly: {
            type: BooleanConstructor;
            default: any;
        };
        getPopupContainer: {
            type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
        };
        panelRender: {
            type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
        };
        role: StringConstructor;
        name: StringConstructor;
        autocomplete: StringConstructor;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        showToday: {
            type: BooleanConstructor;
            default: any;
        };
        showTime: {
            type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
            default: any;
        };
        locale: {
            type: import("vue").PropType<import("./generatePicker").PickerLocale>;
        };
        size: {
            type: import("vue").PropType<import("../config-provider").SizeType>;
        };
        bordered: {
            type: BooleanConstructor;
            default: any;
        };
        dateRender: {
            type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
        };
        disabledDate: {
            type: import("vue").PropType<(date: Moment) => boolean>;
        };
        mode: {
            type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
        };
        picker: {
            type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
        };
        valueFormat: StringConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        showNow?: unknown;
        monthCellRender?: unknown;
        monthCellContentRender?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        dateRender?: unknown;
        disabledDate?: unknown;
        mode?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        disabled?: boolean;
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: import("../vc-picker/interface").PanelMode;
        locale?: import("./generatePicker").PickerLocale;
        format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
        value?: string | Moment;
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
        defaultPickerValue?: string | Moment;
        defaultValue?: string | Moment;
        disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
        showTime?: any;
        monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        showNow?: boolean;
        renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: string;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    }, {
        open: boolean;
        disabled: boolean;
        showTime: any;
        showNow: boolean;
        showToday: boolean;
        allowClear: boolean;
        autofocus: boolean;
        defaultOpen: boolean;
        inputReadOnly: boolean;
        bordered: boolean;
    }>;
    MonthPicker: import("vue").DefineComponent<{
        defaultPickerValue: {
            type: import("vue").PropType<string | Moment>;
        };
        defaultValue: {
            type: import("vue").PropType<string | Moment>;
        };
        value: {
            type: import("vue").PropType<string | Moment>;
        };
        disabledTime: {
            type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
        };
        format: {
            type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
        };
        renderExtraFooter: {
            type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
        };
        showNow: {
            type: BooleanConstructor;
            default: any;
        };
        monthCellRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        monthCellContentRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        id: StringConstructor;
        dropdownClassName: StringConstructor;
        dropdownAlign: {
            type: import("vue").PropType<import("../vc-align/interface").AlignType>;
        };
        popupStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        transitionName: StringConstructor;
        placeholder: StringConstructor;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        autofocus: {
            type: BooleanConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        tabindex: NumberConstructor;
        open: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        inputReadOnly: {
            type: BooleanConstructor;
            default: any;
        };
        getPopupContainer: {
            type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
        };
        panelRender: {
            type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
        };
        role: StringConstructor;
        name: StringConstructor;
        autocomplete: StringConstructor;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        showToday: {
            type: BooleanConstructor;
            default: any;
        };
        showTime: {
            type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
            default: any;
        };
        locale: {
            type: import("vue").PropType<import("./generatePicker").PickerLocale>;
        };
        size: {
            type: import("vue").PropType<import("../config-provider").SizeType>;
        };
        bordered: {
            type: BooleanConstructor;
            default: any;
        };
        dateRender: {
            type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
        };
        disabledDate: {
            type: import("vue").PropType<(date: Moment) => boolean>;
        };
        mode: {
            type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
        };
        picker: {
            type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
        };
        valueFormat: StringConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        showNow?: unknown;
        monthCellRender?: unknown;
        monthCellContentRender?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        dateRender?: unknown;
        disabledDate?: unknown;
        mode?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        disabled?: boolean;
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: import("../vc-picker/interface").PanelMode;
        locale?: import("./generatePicker").PickerLocale;
        format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
        value?: string | Moment;
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
        defaultPickerValue?: string | Moment;
        defaultValue?: string | Moment;
        disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
        showTime?: any;
        monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        showNow?: boolean;
        renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: string;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    }, {
        open: boolean;
        disabled: boolean;
        showTime: any;
        showNow: boolean;
        showToday: boolean;
        allowClear: boolean;
        autofocus: boolean;
        defaultOpen: boolean;
        inputReadOnly: boolean;
        bordered: boolean;
    }>;
    YearPicker: import("vue").DefineComponent<{
        defaultPickerValue: {
            type: import("vue").PropType<string | Moment>;
        };
        defaultValue: {
            type: import("vue").PropType<string | Moment>;
        };
        value: {
            type: import("vue").PropType<string | Moment>;
        };
        disabledTime: {
            type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
        };
        format: {
            type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
        };
        renderExtraFooter: {
            type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
        };
        showNow: {
            type: BooleanConstructor;
            default: any;
        };
        monthCellRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        monthCellContentRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        id: StringConstructor;
        dropdownClassName: StringConstructor;
        dropdownAlign: {
            type: import("vue").PropType<import("../vc-align/interface").AlignType>;
        };
        popupStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        transitionName: StringConstructor;
        placeholder: StringConstructor;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        autofocus: {
            type: BooleanConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        tabindex: NumberConstructor;
        open: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        inputReadOnly: {
            type: BooleanConstructor;
            default: any;
        };
        getPopupContainer: {
            type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
        };
        panelRender: {
            type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
        };
        role: StringConstructor;
        name: StringConstructor;
        autocomplete: StringConstructor;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        showToday: {
            type: BooleanConstructor;
            default: any;
        };
        showTime: {
            type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
            default: any;
        };
        locale: {
            type: import("vue").PropType<import("./generatePicker").PickerLocale>;
        };
        size: {
            type: import("vue").PropType<import("../config-provider").SizeType>;
        };
        bordered: {
            type: BooleanConstructor;
            default: any;
        };
        dateRender: {
            type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
        };
        disabledDate: {
            type: import("vue").PropType<(date: Moment) => boolean>;
        };
        mode: {
            type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
        };
        picker: {
            type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
        };
        valueFormat: StringConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        showNow?: unknown;
        monthCellRender?: unknown;
        monthCellContentRender?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        dateRender?: unknown;
        disabledDate?: unknown;
        mode?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        disabled?: boolean;
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: import("../vc-picker/interface").PanelMode;
        locale?: import("./generatePicker").PickerLocale;
        format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
        value?: string | Moment;
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
        defaultPickerValue?: string | Moment;
        defaultValue?: string | Moment;
        disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
        showTime?: any;
        monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        showNow?: boolean;
        renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: string;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    }, {
        open: boolean;
        disabled: boolean;
        showTime: any;
        showNow: boolean;
        showToday: boolean;
        allowClear: boolean;
        autofocus: boolean;
        defaultOpen: boolean;
        inputReadOnly: boolean;
        bordered: boolean;
    }>;
    RangePicker: import("vue").DefineComponent<{
        allowEmpty: {
            type: import("vue").PropType<[boolean, boolean]>;
        };
        dateRender: {
            type: import("vue").PropType<import("../vc-picker/RangePicker").RangeDateRender<Moment>>;
        };
        defaultPickerValue: {
            type: import("vue").PropType<[string, string] | [Moment, Moment]>;
        };
        defaultValue: {
            type: import("vue").PropType<[string, string] | [Moment, Moment]>;
        };
        value: {
            type: import("vue").PropType<[string, string] | [Moment, Moment]>;
        };
        disabledTime: {
            type: import("vue").PropType<(date: Moment, type: import("../vc-picker/RangePicker").RangeType) => import("../vc-picker/interface").DisabledTimes>;
        };
        disabled: {
            type: import("vue").PropType<boolean | [boolean, boolean]>;
        };
        format: StringConstructor;
        renderExtraFooter: {
            type: import("vue").PropType<() => import("../_util/type").VueNode>;
        };
        separator: {
            type: StringConstructor;
        };
        ranges: {
            type: import("vue").PropType<Record<string, [Moment, Moment] | (() => [Moment, Moment])>>;
        };
        placeholder: ArrayConstructor;
        mode: {
            type: import("vue").PropType<[import("../vc-picker/interface").PanelMode, import("../vc-picker/interface").PanelMode]>;
        };
        id: StringConstructor;
        dropdownClassName: StringConstructor;
        dropdownAlign: {
            type: import("vue").PropType<import("../vc-align/interface").AlignType>;
        };
        popupStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        transitionName: StringConstructor;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        autofocus: {
            type: BooleanConstructor;
            default: any;
        };
        tabindex: NumberConstructor;
        open: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        inputReadOnly: {
            type: BooleanConstructor;
            default: any;
        };
        getPopupContainer: {
            type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
        };
        panelRender: {
            type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
        };
        role: StringConstructor;
        name: StringConstructor;
        autocomplete: StringConstructor;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        showToday: {
            type: BooleanConstructor;
            default: any;
        };
        showTime: {
            type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
            default: any;
        };
        locale: {
            type: import("vue").PropType<import("./generatePicker").PickerLocale>;
        };
        size: {
            type: import("vue").PropType<import("../config-provider").SizeType>;
        };
        bordered: {
            type: BooleanConstructor;
            default: any;
        };
        disabledDate: {
            type: import("vue").PropType<(date: Moment) => boolean>;
        };
        picker: {
            type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
        };
        valueFormat: StringConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open" | "calendarChange")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open" | "calendarChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        allowEmpty?: unknown;
        dateRender?: unknown;
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        disabled?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        separator?: unknown;
        ranges?: unknown;
        placeholder?: unknown;
        mode?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        disabledDate?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        separator?: string;
        disabled?: boolean | [boolean, boolean];
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: [import("../vc-picker/interface").PanelMode, import("../vc-picker/interface").PanelMode];
        locale?: import("./generatePicker").PickerLocale;
        format?: string;
        value?: [string, string] | [Moment, Moment];
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/RangePicker").RangeDateRender<Moment>;
        defaultPickerValue?: [string, string] | [Moment, Moment];
        defaultValue?: [string, string] | [Moment, Moment];
        disabledTime?: (date: Moment, type: import("../vc-picker/RangePicker").RangeType) => import("../vc-picker/interface").DisabledTimes;
        showTime?: any;
        renderExtraFooter?: () => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: unknown[];
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        ranges?: Record<string, [Moment, Moment] | (() => [Moment, Moment])>;
        allowEmpty?: [boolean, boolean];
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        onCalendarChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    }, {
        open: boolean;
        showTime: any;
        showToday: boolean;
        allowClear: boolean;
        autofocus: boolean;
        defaultOpen: boolean;
        inputReadOnly: boolean;
        bordered: boolean;
    }>;
    TimePicker: import("vue").DefineComponent<{
        defaultPickerValue: {
            type: import("vue").PropType<string | Moment>;
        };
        defaultValue: {
            type: import("vue").PropType<string | Moment>;
        };
        value: {
            type: import("vue").PropType<string | Moment>;
        };
        disabledTime: {
            type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
        };
        format: {
            type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
        };
        renderExtraFooter: {
            type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
        };
        showNow: {
            type: BooleanConstructor;
            default: any;
        };
        monthCellRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        monthCellContentRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        id: StringConstructor;
        dropdownClassName: StringConstructor;
        dropdownAlign: {
            type: import("vue").PropType<import("../vc-align/interface").AlignType>;
        };
        popupStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        transitionName: StringConstructor;
        placeholder: StringConstructor;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        autofocus: {
            type: BooleanConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        tabindex: NumberConstructor;
        open: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        inputReadOnly: {
            type: BooleanConstructor;
            default: any;
        };
        getPopupContainer: {
            type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
        };
        panelRender: {
            type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
        };
        role: StringConstructor;
        name: StringConstructor;
        autocomplete: StringConstructor;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        showToday: {
            type: BooleanConstructor;
            default: any;
        };
        showTime: {
            type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
            default: any;
        };
        locale: {
            type: import("vue").PropType<import("./generatePicker").PickerLocale>;
        };
        size: {
            type: import("vue").PropType<import("../config-provider").SizeType>;
        };
        bordered: {
            type: BooleanConstructor;
            default: any;
        };
        dateRender: {
            type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
        };
        disabledDate: {
            type: import("vue").PropType<(date: Moment) => boolean>;
        };
        mode: {
            type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
        };
        picker: {
            type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
        };
        valueFormat: StringConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        showNow?: unknown;
        monthCellRender?: unknown;
        monthCellContentRender?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        dateRender?: unknown;
        disabledDate?: unknown;
        mode?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        disabled?: boolean;
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: import("../vc-picker/interface").PanelMode;
        locale?: import("./generatePicker").PickerLocale;
        format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
        value?: string | Moment;
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
        defaultPickerValue?: string | Moment;
        defaultValue?: string | Moment;
        disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
        showTime?: any;
        monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        showNow?: boolean;
        renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: string;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    }, {
        open: boolean;
        disabled: boolean;
        showTime: any;
        showNow: boolean;
        showToday: boolean;
        allowClear: boolean;
        autofocus: boolean;
        defaultOpen: boolean;
        inputReadOnly: boolean;
        bordered: boolean;
    }>;
    QuarterPicker: import("vue").DefineComponent<{
        defaultPickerValue: {
            type: import("vue").PropType<string | Moment>;
        };
        defaultValue: {
            type: import("vue").PropType<string | Moment>;
        };
        value: {
            type: import("vue").PropType<string | Moment>;
        };
        disabledTime: {
            type: import("vue").PropType<import("../vc-picker/interface").DisabledTime<Moment>>;
        };
        format: {
            type: import("vue").PropType<string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[]>;
        };
        renderExtraFooter: {
            type: import("vue").PropType<(mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode>;
        };
        showNow: {
            type: BooleanConstructor;
            default: any;
        };
        monthCellRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        monthCellContentRender: {
            type: import("vue").PropType<import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>>;
        };
        id: StringConstructor;
        dropdownClassName: StringConstructor;
        dropdownAlign: {
            type: import("vue").PropType<import("../vc-align/interface").AlignType>;
        };
        popupStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        transitionName: StringConstructor;
        placeholder: StringConstructor;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        autofocus: {
            type: BooleanConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        tabindex: NumberConstructor;
        open: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        inputReadOnly: {
            type: BooleanConstructor;
            default: any;
        };
        getPopupContainer: {
            type: import("vue").PropType<(node: HTMLElement) => HTMLElement>;
        };
        panelRender: {
            type: import("vue").PropType<(originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode>;
        };
        role: StringConstructor;
        name: StringConstructor;
        autocomplete: StringConstructor;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        showToday: {
            type: BooleanConstructor;
            default: any;
        };
        showTime: {
            type: import("vue").PropType<boolean | import("../vc-picker/panels/TimePanel").SharedTimeProps<Moment>>;
            default: any;
        };
        locale: {
            type: import("vue").PropType<import("./generatePicker").PickerLocale>;
        };
        size: {
            type: import("vue").PropType<import("../config-provider").SizeType>;
        };
        bordered: {
            type: BooleanConstructor;
            default: any;
        };
        dateRender: {
            type: import("vue").PropType<import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>>;
        };
        disabledDate: {
            type: import("vue").PropType<(date: Moment) => boolean>;
        };
        mode: {
            type: import("vue").PropType<import("../vc-picker/interface").PanelMode>;
        };
        picker: {
            type: import("vue").PropType<import("../vc-picker/interface").PickerMode>;
        };
        valueFormat: StringConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "openChange" | "panelChange" | "ok" | "update:value" | "update:open")[], "blur" | "change" | "focus" | "ok" | "openChange" | "panelChange" | "update:value" | "update:open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        defaultPickerValue?: unknown;
        defaultValue?: unknown;
        value?: unknown;
        disabledTime?: unknown;
        format?: unknown;
        renderExtraFooter?: unknown;
        showNow?: unknown;
        monthCellRender?: unknown;
        monthCellContentRender?: unknown;
        id?: unknown;
        dropdownClassName?: unknown;
        dropdownAlign?: unknown;
        popupStyle?: unknown;
        transitionName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        disabled?: unknown;
        tabindex?: unknown;
        open?: unknown;
        defaultOpen?: unknown;
        inputReadOnly?: unknown;
        getPopupContainer?: unknown;
        panelRender?: unknown;
        role?: unknown;
        name?: unknown;
        autocomplete?: unknown;
        direction?: unknown;
        showToday?: unknown;
        showTime?: unknown;
        locale?: unknown;
        size?: unknown;
        bordered?: unknown;
        dateRender?: unknown;
        disabledDate?: unknown;
        mode?: unknown;
        picker?: unknown;
        valueFormat?: unknown;
    } & {} & {
        size?: import("../config-provider").SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        disabled?: boolean;
        disabledDate?: (date: Moment) => boolean;
        picker?: import("../vc-picker/interface").PickerMode;
        mode?: import("../vc-picker/interface").PanelMode;
        locale?: import("./generatePicker").PickerLocale;
        format?: string | import("../vc-picker/interface").CustomFormat<Moment> | (string | import("../vc-picker/interface").CustomFormat<Moment>)[];
        value?: string | Moment;
        name?: string;
        role?: string;
        tabindex?: number;
        getPopupContainer?: (node: HTMLElement) => HTMLElement;
        autocomplete?: string;
        dateRender?: import("../vc-picker/panels/DatePanel/DateBody").DateRender<Moment>;
        defaultPickerValue?: string | Moment;
        defaultValue?: string | Moment;
        disabledTime?: import("../vc-picker/interface").DisabledTime<Moment>;
        showTime?: any;
        monthCellRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        showNow?: boolean;
        renderExtraFooter?: (mode: import("../vc-picker/interface").PanelMode) => import("../_util/type").VueNode;
        showToday?: boolean;
        transitionName?: string;
        popupStyle?: unknown;
        dropdownClassName?: string;
        dropdownAlign?: unknown;
        placeholder?: string;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        inputReadOnly?: boolean;
        id?: string;
        panelRender?: (originPanel: import("../_util/type").VueNode) => import("../_util/type").VueNode;
        monthCellContentRender?: import("../vc-picker/panels/MonthPanel/MonthBody").MonthCellRender<Moment>;
        bordered?: boolean;
        valueFormat?: string;
    }> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onPanelChange?: (...args: any[]) => any;
        onOk?: (...args: any[]) => any;
        onOpenChange?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        "onUpdate:open"?: (...args: any[]) => any;
    }, {
        open: boolean;
        disabled: boolean;
        showTime: any;
        showNow: boolean;
        showToday: boolean;
        allowClear: boolean;
        autofocus: boolean;
        defaultOpen: boolean;
        inputReadOnly: boolean;
        bordered: boolean;
    }>;
    install: (app: App) => App<any>;
};
export default _default;
