export type { ProgressProps } from './props';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            width: number;
            prefixCls: string;
            strokeWidth: number;
            success: import("./props").SuccessProps;
            gapDegree: number;
            percent: number;
            trailColor: string;
            successPercent: number;
            steps: number;
        }> & Omit<Readonly<{
            prefixCls?: unknown;
            type?: unknown;
            percent?: unknown;
            format?: unknown;
            status?: unknown;
            showInfo?: unknown;
            strokeWidth?: unknown;
            strokeLinecap?: unknown;
            strokeColor?: unknown;
            trailColor?: unknown;
            width?: unknown;
            success?: unknown;
            gapDegree?: unknown;
            gapPosition?: unknown;
            size?: unknown;
            steps?: unknown;
            successPercent?: unknown;
        } & {
            width: number;
            prefixCls: string;
            strokeWidth: number;
            success: import("./props").SuccessProps;
            gapDegree: number;
            percent: number;
            trailColor: string;
            successPercent: number;
            steps: number;
        } & {
            size?: "default" | "small";
            strokeLinecap?: "round" | "butt" | "square";
            format?: (percent?: number, successPercent?: number) => import("../_util/type").VueNode;
            type?: "circle" | "line" | "dashboard";
            status?: "normal" | "active" | "success" | "exception";
            gapPosition?: "left" | "right" | "bottom" | "top";
            strokeColor?: string | import("./props").ProgressGradient;
            showInfo?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "width" | "prefixCls" | "strokeWidth" | "success" | "gapDegree" | "percent" | "trailColor" | "successPercent" | "steps">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls?: unknown;
            type?: unknown;
            percent?: unknown;
            format?: unknown;
            status?: unknown;
            showInfo?: unknown;
            strokeWidth?: unknown;
            strokeLinecap?: unknown;
            strokeColor?: unknown;
            trailColor?: unknown;
            width?: unknown;
            success?: unknown;
            gapDegree?: unknown;
            gapPosition?: unknown;
            size?: unknown;
            steps?: unknown;
            successPercent?: unknown;
        } & {
            width: number;
            prefixCls: string;
            strokeWidth: number;
            success: import("./props").SuccessProps;
            gapDegree: number;
            percent: number;
            trailColor: string;
            successPercent: number;
            steps: number;
        } & {
            size?: "default" | "small";
            strokeLinecap?: "round" | "butt" | "square";
            format?: (percent?: number, successPercent?: number) => import("../_util/type").VueNode;
            type?: "circle" | "line" | "dashboard";
            status?: "normal" | "active" | "success" | "exception";
            gapPosition?: "left" | "right" | "bottom" | "top";
            strokeColor?: string | import("./props").ProgressGradient;
            showInfo?: boolean;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            width: number;
            prefixCls: string;
            strokeWidth: number;
            success: import("./props").SuccessProps;
            gapDegree: number;
            percent: number;
            trailColor: string;
            successPercent: number;
            steps: number;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls?: unknown;
        type?: unknown;
        percent?: unknown;
        format?: unknown;
        status?: unknown;
        showInfo?: unknown;
        strokeWidth?: unknown;
        strokeLinecap?: unknown;
        strokeColor?: unknown;
        trailColor?: unknown;
        width?: unknown;
        success?: unknown;
        gapDegree?: unknown;
        gapPosition?: unknown;
        size?: unknown;
        steps?: unknown;
        successPercent?: unknown;
    } & {
        width: number;
        prefixCls: string;
        strokeWidth: number;
        success: import("./props").SuccessProps;
        gapDegree: number;
        percent: number;
        trailColor: string;
        successPercent: number;
        steps: number;
    } & {
        size?: "default" | "small";
        strokeLinecap?: "round" | "butt" | "square";
        format?: (percent?: number, successPercent?: number) => import("../_util/type").VueNode;
        type?: "circle" | "line" | "dashboard";
        status?: "normal" | "active" | "success" | "exception";
        gapPosition?: "left" | "right" | "bottom" | "top";
        strokeColor?: string | import("./props").ProgressGradient;
        showInfo?: boolean;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls?: unknown;
    type?: unknown;
    percent?: unknown;
    format?: unknown;
    status?: unknown;
    showInfo?: unknown;
    strokeWidth?: unknown;
    strokeLinecap?: unknown;
    strokeColor?: unknown;
    trailColor?: unknown;
    width?: unknown;
    success?: unknown;
    gapDegree?: unknown;
    gapPosition?: unknown;
    size?: unknown;
    steps?: unknown;
    successPercent?: unknown;
} & {
    width: number;
    prefixCls: string;
    strokeWidth: number;
    success: import("./props").SuccessProps;
    gapDegree: number;
    percent: number;
    trailColor: string;
    successPercent: number;
    steps: number;
} & {
    size?: "default" | "small";
    strokeLinecap?: "round" | "butt" | "square";
    format?: (percent?: number, successPercent?: number) => import("../_util/type").VueNode;
    type?: "circle" | "line" | "dashboard";
    status?: "normal" | "active" | "success" | "exception";
    gapPosition?: "left" | "right" | "bottom" | "top";
    strokeColor?: string | import("./props").ProgressGradient;
    showInfo?: boolean;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    width: number;
    prefixCls: string;
    strokeWidth: number;
    success: import("./props").SuccessProps;
    gapDegree: number;
    percent: number;
    trailColor: string;
    successPercent: number;
    steps: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
