import type { ExtractPropTypes } from 'vue';
import { dropdownButtonProps } from './props';
export declare type DropdownButtonProps = Partial<ExtractPropTypes<ReturnType<typeof dropdownButtonProps>>>;
declare const _default: import("vue").DefineComponent<{
    type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "primary" | "ghost">;
    size: import("vue-types").VueTypeDef<"small" | "large">;
    htmlType: import("vue-types").VueTypeDef<"button" | "submit" | "reset"> & {
        default: "button" | "submit" | "reset";
    };
    href: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    icon: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onClick: {
        type: import("vue").PropType<import("../_util/EventInterface").MouseEventHandler>;
    };
    arrow: import("vue-types").VueTypeValidableDef<boolean>;
    trigger: {
        type: import("vue").PropType<"click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[]>;
    };
    overlay: import("vue-types").VueTypeValidableDef<any>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    align: {
        type: import("vue").PropType<{
            points?: [string, string];
            offset?: [number, number];
            targetOffset?: [number, number];
            overflow?: {
                adjustX?: boolean;
                adjustY?: boolean;
            };
            useCssRight?: boolean;
            useCssBottom?: boolean;
            useCssTransform?: boolean;
        }>;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter">;
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
    onVisibleChange: {
        type: import("vue").PropType<(val: boolean) => void>;
    };
    'onUpdate:visible': {
        type: import("vue").PropType<(val: boolean) => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:visible" | "visibleChange")[], "click" | "update:visible" | "visibleChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    size?: unknown;
    htmlType?: unknown;
    href?: unknown;
    disabled?: unknown;
    prefixCls?: unknown;
    icon?: unknown;
    title?: unknown;
    onClick?: unknown;
    arrow?: unknown;
    trigger?: unknown;
    overlay?: unknown;
    visible?: unknown;
    align?: unknown;
    getPopupContainer?: unknown;
    transitionName?: unknown;
    placement?: unknown;
    overlayClassName?: unknown;
    overlayStyle?: unknown;
    forceRender?: unknown;
    mouseEnterDelay?: unknown;
    mouseLeaveDelay?: unknown;
    openClassName?: unknown;
    minOverlayWidthMatchTrigger?: unknown;
    onVisibleChange?: unknown;
    'onUpdate:visible'?: unknown;
} & {
    title: string;
    prefixCls: string;
    htmlType: "button" | "submit" | "reset";
    href: string;
    transitionName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    openClassName: string;
} & {
    onClick?: import("../_util/EventInterface").MouseEventHandler;
    visible?: boolean;
    overlay?: any;
    size?: "small" | "large";
    icon?: any;
    disabled?: boolean;
    type?: "default" | "link" | "text" | "dashed" | "primary" | "ghost";
    align?: unknown;
    getPopupContainer?: (...args: any[]) => any;
    trigger?: "click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[];
    "onUpdate:visible"?: (val: boolean) => void;
    forceRender?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter";
    overlayStyle?: import("vue").CSSProperties;
    onVisibleChange?: (val: boolean) => void;
    arrow?: boolean;
    minOverlayWidthMatchTrigger?: boolean;
}> & {
    onClick?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
    onVisibleChange?: (...args: any[]) => any;
}, {
    title: string;
    prefixCls: string;
    htmlType: "button" | "submit" | "reset";
    href: string;
    getPopupContainer: (...args: any[]) => any;
    transitionName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    openClassName: string;
}>;
export default _default;
