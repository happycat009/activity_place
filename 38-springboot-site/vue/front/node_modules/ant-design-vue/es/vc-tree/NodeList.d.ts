/**
 * Handle virtual list of the TreeNodes.
 */
import type { FlattenNode, DataEntity, ScrollTo } from './interface';
export declare const MOTION_KEY: string;
export declare const MotionEntity: DataEntity;
export interface NodeListRef {
    scrollTo: ScrollTo;
    getIndentWidth: () => number;
}
/**
 * We only need get visible content items to play the animation.
 */
export declare function getMinimumRangeTransitionRange(list: FlattenNode[], virtual: boolean, height: number, itemHeight: number): FlattenNode[];
declare const _default: import("vue").DefineComponent<{
    prefixCls: {
        type: import("vue").PropType<string>;
    };
    data: {
        type: import("vue").PropType<FlattenNode[]>;
    };
    motion: {
        type: import("vue").PropType<any>;
    };
    focusable: {
        type: import("vue").PropType<boolean>;
    };
    activeItem: {
        type: import("vue").PropType<FlattenNode>;
    };
    focused: {
        type: import("vue").PropType<boolean>;
    };
    tabindex: {
        type: import("vue").PropType<number>;
    };
    checkable: {
        type: import("vue").PropType<boolean>;
    };
    selectable: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    expandedKeys: {
        type: import("vue").PropType<import("./interface").Key[]>;
    };
    selectedKeys: {
        type: import("vue").PropType<import("./interface").Key[]>;
    };
    checkedKeys: {
        type: import("vue").PropType<import("./interface").Key[]>;
    };
    loadedKeys: {
        type: import("vue").PropType<import("./interface").Key[]>;
    };
    loadingKeys: {
        type: import("vue").PropType<import("./interface").Key[]>;
    };
    halfCheckedKeys: {
        type: import("vue").PropType<import("./interface").Key[]>;
    };
    keyEntities: {
        type: import("vue").PropType<Record<import("./interface").Key, DataEntity>>;
    };
    dragging: {
        type: import("vue").PropType<boolean>;
    };
    dragOverNodeKey: {
        type: import("vue").PropType<import("./interface").Key>;
    };
    dropPosition: {
        type: import("vue").PropType<number>;
    };
    height: {
        type: import("vue").PropType<number>;
    };
    itemHeight: {
        type: import("vue").PropType<number>;
    };
    virtual: {
        type: import("vue").PropType<boolean>;
    };
    onKeydown: {
        type: import("vue").PropType<import("../_util/EventInterface").EventHandler>;
    };
    onFocus: {
        type: import("vue").PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: import("vue").PropType<(e: FocusEvent) => void>;
    };
    onActiveChange: {
        type: import("vue").PropType<(key: import("./interface").Key) => void>;
    };
    onContextmenu: {
        type: import("vue").PropType<import("../_util/EventInterface").EventHandler>;
    };
    onListChangeStart: {
        type: import("vue").PropType<() => void>;
    };
    onListChangeEnd: {
        type: import("vue").PropType<() => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls?: unknown;
    data?: unknown;
    motion?: unknown;
    focusable?: unknown;
    activeItem?: unknown;
    focused?: unknown;
    tabindex?: unknown;
    checkable?: unknown;
    selectable?: unknown;
    disabled?: unknown;
    expandedKeys?: unknown;
    selectedKeys?: unknown;
    checkedKeys?: unknown;
    loadedKeys?: unknown;
    loadingKeys?: unknown;
    halfCheckedKeys?: unknown;
    keyEntities?: unknown;
    dragging?: unknown;
    dragOverNodeKey?: unknown;
    dropPosition?: unknown;
    height?: unknown;
    itemHeight?: unknown;
    virtual?: unknown;
    onKeydown?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    onActiveChange?: unknown;
    onContextmenu?: unknown;
    onListChangeStart?: unknown;
    onListChangeEnd?: unknown;
} & {} & {
    data?: FlattenNode[];
    height?: number;
    onFocus?: (e: FocusEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onKeydown?: import("../_util/EventInterface").EventHandler;
    onContextmenu?: import("../_util/EventInterface").EventHandler;
    prefixCls?: string;
    motion?: any;
    disabled?: boolean;
    tabindex?: number;
    virtual?: boolean;
    focused?: boolean;
    selectedKeys?: import("./interface").Key[];
    selectable?: boolean;
    dragging?: boolean;
    itemHeight?: number;
    checkable?: boolean;
    checkedKeys?: import("./interface").Key[];
    focusable?: boolean;
    activeItem?: FlattenNode;
    expandedKeys?: import("./interface").Key[];
    loadedKeys?: import("./interface").Key[];
    loadingKeys?: import("./interface").Key[];
    halfCheckedKeys?: import("./interface").Key[];
    keyEntities?: Record<import("./interface").Key, DataEntity>;
    dragOverNodeKey?: import("./interface").Key;
    dropPosition?: number;
    onActiveChange?: (key: import("./interface").Key) => void;
    onListChangeStart?: () => void;
    onListChangeEnd?: () => void;
}>, {}>;
export default _default;
