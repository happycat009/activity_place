import type { FlattenNode } from './interface';
import type { TreeNodeRequiredProps } from './utils/treeUtil';
import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    active: BooleanConstructor;
    motion: ObjectConstructor;
    motionNodes: {
        type: PropType<FlattenNode[]>;
    };
    onMotionStart: FunctionConstructor;
    onMotionEnd: FunctionConstructor;
    motionType: StringConstructor;
    treeNodeRequiredProps: {
        type: PropType<TreeNodeRequiredProps>;
    };
    eventKey: (NumberConstructor | StringConstructor)[];
    prefixCls: StringConstructor;
    expanded: {
        type: BooleanConstructor;
        default: any;
    };
    selected: {
        type: BooleanConstructor;
        default: any;
    };
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    loaded: {
        type: BooleanConstructor;
        default: any;
    };
    loading: {
        type: BooleanConstructor;
        default: any;
    };
    halfChecked: {
        type: BooleanConstructor;
        default: any;
    };
    title: import("vue-types").VueTypeValidableDef<any>;
    dragOver: {
        type: BooleanConstructor;
        default: any;
    };
    dragOverGapTop: {
        type: BooleanConstructor;
        default: any;
    };
    dragOverGapBottom: {
        type: BooleanConstructor;
        default: any;
    };
    pos: StringConstructor;
    data: {
        type: PropType<import("./interface").DataNode>;
        default: import("./interface").DataNode;
    };
    parent: {
        type: PropType<import("./interface").DataNode>;
        default: import("./interface").DataNode;
    };
    isStart: {
        type: PropType<boolean[]>;
    };
    isEnd: {
        type: PropType<boolean[]>;
    };
    onMousemove: {
        type: PropType<import("../_util/EventInterface").EventHandler>;
    };
    isLeaf: {
        type: BooleanConstructor;
        default: any;
    };
    checkable: {
        type: BooleanConstructor;
        default: any;
    };
    selectable: {
        type: BooleanConstructor;
        default: any;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    disableCheckbox: {
        type: BooleanConstructor;
        default: any;
    };
    icon: import("vue-types").VueTypeValidableDef<any>;
    switcherIcon: import("vue-types").VueTypeValidableDef<any>;
    domRef: {
        type: PropType<(arg: any) => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    active?: unknown;
    motion?: unknown;
    motionNodes?: unknown;
    onMotionStart?: unknown;
    onMotionEnd?: unknown;
    motionType?: unknown;
    treeNodeRequiredProps?: unknown;
    eventKey?: unknown;
    prefixCls?: unknown;
    expanded?: unknown;
    selected?: unknown;
    checked?: unknown;
    loaded?: unknown;
    loading?: unknown;
    halfChecked?: unknown;
    title?: unknown;
    dragOver?: unknown;
    dragOverGapTop?: unknown;
    dragOverGapBottom?: unknown;
    pos?: unknown;
    data?: unknown;
    parent?: unknown;
    isStart?: unknown;
    isEnd?: unknown;
    onMousemove?: unknown;
    isLeaf?: unknown;
    checkable?: unknown;
    selectable?: unknown;
    disabled?: unknown;
    disableCheckbox?: unknown;
    icon?: unknown;
    switcherIcon?: unknown;
    domRef?: unknown;
} & {
    data: import("./interface").DataNode;
    active: boolean;
    parent: import("./interface").DataNode;
} & {
    title?: any;
    onMousemove?: import("../_util/EventInterface").EventHandler;
    prefixCls?: string;
    expanded?: boolean;
    icon?: any;
    motion?: Record<string, any>;
    disabled?: boolean;
    loading?: boolean;
    checked?: boolean;
    eventKey?: string | number;
    isLeaf?: boolean;
    selectable?: boolean;
    disableCheckbox?: boolean;
    checkable?: boolean;
    domRef?: (arg: any) => void;
    selected?: boolean;
    switcherIcon?: any;
    loaded?: boolean;
    halfChecked?: boolean;
    dragOver?: boolean;
    dragOverGapTop?: boolean;
    dragOverGapBottom?: boolean;
    pos?: string;
    isStart?: boolean[];
    isEnd?: boolean[];
    motionNodes?: FlattenNode[];
    onMotionStart?: Function;
    onMotionEnd?: Function;
    motionType?: string;
    treeNodeRequiredProps?: TreeNodeRequiredProps;
}>, {
    data: import("./interface").DataNode;
    expanded: boolean;
    active: boolean;
    disabled: boolean;
    loading: boolean;
    checked: boolean;
    isLeaf: boolean;
    selectable: boolean;
    disableCheckbox: boolean;
    checkable: boolean;
    selected: boolean;
    loaded: boolean;
    halfChecked: boolean;
    dragOver: boolean;
    dragOverGapTop: boolean;
    dragOverGapBottom: boolean;
    parent: import("./interface").DataNode;
}>;
export default _default;
