export { paginationProps, paginationConfig } from './Pagination';
export type { PaginationProps, PaginationConfig } from './Pagination';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            size: string;
            locale: {
                [key: string]: any;
            };
            role: string;
            current: number;
            itemRender: (...args: any[]) => any;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            selectPrefixCls: string;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            showSizeChange: (...args: any[]) => any;
            onShowSizeChange: (...args: any[]) => any;
            "onUpdate:current": (...args: any[]) => any;
            "onUpdate:pageSize": (...args: any[]) => any;
        }> & Omit<Readonly<{
            total?: unknown;
            defaultCurrent?: unknown;
            disabled?: unknown;
            current?: unknown;
            defaultPageSize?: unknown;
            pageSize?: unknown;
            hideOnSinglePage?: unknown;
            showSizeChanger?: unknown;
            pageSizeOptions?: unknown;
            buildOptionText?: unknown;
            showSizeChange?: unknown;
            showQuickJumper?: unknown;
            showTotal?: unknown;
            size?: unknown;
            simple?: unknown;
            locale?: unknown;
            prefixCls?: unknown;
            selectPrefixCls?: unknown;
            itemRender?: unknown;
            role?: unknown;
            showLessItems?: unknown;
            onChange?: unknown;
            onShowSizeChange?: unknown;
            'onUpdate:current'?: unknown;
            'onUpdate:pageSize'?: unknown;
        } & {
            prefixCls: string;
            size: string;
            locale: {
                [key: string]: any;
            };
            role: string;
            current: number;
            pageSize: number;
            selectPrefixCls: string;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
        } & {
            onChange?: (...args: any[]) => any;
            disabled?: boolean;
            itemRender?: (...args: any[]) => any;
            pageSizeOptions?: (string | number)[];
            buildOptionText?: (...args: any[]) => any;
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            showLessItems?: boolean;
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showSizeChange?: (...args: any[]) => any;
            onShowSizeChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
            "onUpdate:pageSize"?: (...args: any[]) => any;
        }> & {
            onChange?: (...args: any[]) => any;
            onShowSizeChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
            "onUpdate:pageSize"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "prefixCls" | "size" | "locale" | "role" | "current" | "itemRender" | "pageSize" | "buildOptionText" | "selectPrefixCls" | "total" | "defaultCurrent" | "defaultPageSize" | "showSizeChange" | "onShowSizeChange" | "onUpdate:current" | "onUpdate:pageSize">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:pageSize" | "update:current" | "showSizeChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            total?: unknown;
            defaultCurrent?: unknown;
            disabled?: unknown;
            current?: unknown;
            defaultPageSize?: unknown;
            pageSize?: unknown;
            hideOnSinglePage?: unknown;
            showSizeChanger?: unknown;
            pageSizeOptions?: unknown;
            buildOptionText?: unknown;
            showSizeChange?: unknown;
            showQuickJumper?: unknown;
            showTotal?: unknown;
            size?: unknown;
            simple?: unknown;
            locale?: unknown;
            prefixCls?: unknown;
            selectPrefixCls?: unknown;
            itemRender?: unknown;
            role?: unknown;
            showLessItems?: unknown;
            onChange?: unknown;
            onShowSizeChange?: unknown;
            'onUpdate:current'?: unknown;
            'onUpdate:pageSize'?: unknown;
        } & {
            prefixCls: string;
            size: string;
            locale: {
                [key: string]: any;
            };
            role: string;
            current: number;
            pageSize: number;
            selectPrefixCls: string;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
        } & {
            onChange?: (...args: any[]) => any;
            disabled?: boolean;
            itemRender?: (...args: any[]) => any;
            pageSizeOptions?: (string | number)[];
            buildOptionText?: (...args: any[]) => any;
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            showLessItems?: boolean;
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showSizeChange?: (...args: any[]) => any;
            onShowSizeChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
            "onUpdate:pageSize"?: (...args: any[]) => any;
        }> & {
            onChange?: (...args: any[]) => any;
            onShowSizeChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
            "onUpdate:pageSize"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:pageSize" | "update:current" | "showSizeChange")[], string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            size: string;
            locale: {
                [key: string]: any;
            };
            role: string;
            current: number;
            itemRender: (...args: any[]) => any;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            selectPrefixCls: string;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            showSizeChange: (...args: any[]) => any;
            onShowSizeChange: (...args: any[]) => any;
            "onUpdate:current": (...args: any[]) => any;
            "onUpdate:pageSize": (...args: any[]) => any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        total?: unknown;
        defaultCurrent?: unknown;
        disabled?: unknown;
        current?: unknown;
        defaultPageSize?: unknown;
        pageSize?: unknown;
        hideOnSinglePage?: unknown;
        showSizeChanger?: unknown;
        pageSizeOptions?: unknown;
        buildOptionText?: unknown;
        showSizeChange?: unknown;
        showQuickJumper?: unknown;
        showTotal?: unknown;
        size?: unknown;
        simple?: unknown;
        locale?: unknown;
        prefixCls?: unknown;
        selectPrefixCls?: unknown;
        itemRender?: unknown;
        role?: unknown;
        showLessItems?: unknown;
        onChange?: unknown;
        onShowSizeChange?: unknown;
        'onUpdate:current'?: unknown;
        'onUpdate:pageSize'?: unknown;
    } & {
        prefixCls: string;
        size: string;
        locale: {
            [key: string]: any;
        };
        role: string;
        current: number;
        pageSize: number;
        selectPrefixCls: string;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
    } & {
        onChange?: (...args: any[]) => any;
        disabled?: boolean;
        itemRender?: (...args: any[]) => any;
        pageSizeOptions?: (string | number)[];
        buildOptionText?: (...args: any[]) => any;
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        showLessItems?: boolean;
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showSizeChange?: (...args: any[]) => any;
        onShowSizeChange?: (...args: any[]) => any;
        "onUpdate:current"?: (...args: any[]) => any;
        "onUpdate:pageSize"?: (...args: any[]) => any;
    }> & {
        onChange?: (...args: any[]) => any;
        onShowSizeChange?: (...args: any[]) => any;
        "onUpdate:current"?: (...args: any[]) => any;
        "onUpdate:pageSize"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    total?: unknown;
    defaultCurrent?: unknown;
    disabled?: unknown;
    current?: unknown;
    defaultPageSize?: unknown;
    pageSize?: unknown;
    hideOnSinglePage?: unknown;
    showSizeChanger?: unknown;
    pageSizeOptions?: unknown;
    buildOptionText?: unknown;
    showSizeChange?: unknown;
    showQuickJumper?: unknown;
    showTotal?: unknown;
    size?: unknown;
    simple?: unknown;
    locale?: unknown;
    prefixCls?: unknown;
    selectPrefixCls?: unknown;
    itemRender?: unknown;
    role?: unknown;
    showLessItems?: unknown;
    onChange?: unknown;
    onShowSizeChange?: unknown;
    'onUpdate:current'?: unknown;
    'onUpdate:pageSize'?: unknown;
} & {
    prefixCls: string;
    size: string;
    locale: {
        [key: string]: any;
    };
    role: string;
    current: number;
    pageSize: number;
    selectPrefixCls: string;
    total: number;
    defaultCurrent: number;
    defaultPageSize: number;
} & {
    onChange?: (...args: any[]) => any;
    disabled?: boolean;
    itemRender?: (...args: any[]) => any;
    pageSizeOptions?: (string | number)[];
    buildOptionText?: (...args: any[]) => any;
    hideOnSinglePage?: boolean;
    showSizeChanger?: boolean;
    showLessItems?: boolean;
    showQuickJumper?: boolean | {
        [key: string]: any;
    };
    showTotal?: any;
    simple?: boolean;
    showSizeChange?: (...args: any[]) => any;
    onShowSizeChange?: (...args: any[]) => any;
    "onUpdate:current"?: (...args: any[]) => any;
    "onUpdate:pageSize"?: (...args: any[]) => any;
}> & {
    onChange?: (...args: any[]) => any;
    onShowSizeChange?: (...args: any[]) => any;
    "onUpdate:current"?: (...args: any[]) => any;
    "onUpdate:pageSize"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:pageSize" | "update:current" | "showSizeChange")[], "change" | "update:pageSize" | "update:current" | "showSizeChange", {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    size: string;
    locale: {
        [key: string]: any;
    };
    role: string;
    current: number;
    itemRender: (...args: any[]) => any;
    pageSize: number;
    buildOptionText: (...args: any[]) => any;
    selectPrefixCls: string;
    total: number;
    defaultCurrent: number;
    defaultPageSize: number;
    showSizeChange: (...args: any[]) => any;
    onShowSizeChange: (...args: any[]) => any;
    "onUpdate:current": (...args: any[]) => any;
    "onUpdate:pageSize": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
