import type { App, ExtractPropTypes, PropType } from 'vue';
import type { SizeType } from '../config-provider';
import type { DefaultValueType, FieldNames } from '../vc-tree-select/interface';
declare type RawValue = string | number;
export interface LabeledValue {
    key?: string;
    value: RawValue;
    label: any;
}
export declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];
export interface RefTreeSelectProps {
    focus: () => void;
    blur: () => void;
}
export declare const treeSelectProps: {
    suffixIcon: import("vue-types").VueTypeValidableDef<any>;
    size: {
        type: PropType<SizeType>;
    };
    bordered: {
        type: BooleanConstructor;
        default: any;
    };
    replaceFields: {
        type: PropType<FieldNames>;
    };
    onFocus: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onChange: {
        type: PropType<(value: DefaultValueType, labelList: any[], extra: import("../vc-tree-select/interface").ChangeEventExtra) => void>;
    };
    onKeydown: {
        type: PropType<(e: KeyboardEvent) => void>;
    };
    onKeyup: {
        type: PropType<(e: KeyboardEvent) => void>;
    };
    onClick: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onMousedown: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onMouseenter: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onMouseleave: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onSelect: {
        type: PropType<(value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void>;
    };
    prefixCls: StringConstructor;
    direction: {
        type: PropType<"ltr" | "rtl">;
    };
    open: {
        type: BooleanConstructor;
        default: any;
    };
    animation: StringConstructor;
    multiple: {
        type: BooleanConstructor;
        default: any;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    value: {
        type: PropType<DefaultValueType>;
    };
    tabindex: {
        type: (NumberConstructor | StringConstructor)[];
    };
    onDeselect: {
        type: PropType<(value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void>;
    };
    onClear: {
        type: PropType<import("../vc-select/interface/generator").OnClear>;
    };
    loading: {
        type: BooleanConstructor;
        default: any;
    };
    getPopupContainer: {
        type: PropType<import("../vc-select/interface").RenderDOMFunc>;
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    dropdownMatchSelectWidth: {
        type: PropType<number | boolean>;
        default: any;
    };
    defaultValue: {
        type: PropType<DefaultValueType>;
    };
    transitionName: StringConstructor;
    showAction: {
        type: PropType<("click" | "focus")[]>;
    };
    dropdownClassName: StringConstructor;
    placeholder: import("vue-types").VueTypeValidableDef<any>;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    id: StringConstructor;
    clearIcon: import("vue-types").VueTypeValidableDef<any>;
    options: {
        type: PropType<import("../vc-tree-select/interface").DataNode[]>;
    };
    placement: {
        type: PropType<import("../vc-select/generate").Placement>;
    };
    children: ArrayConstructor;
    onSearch: {
        type: PropType<(value: string) => void>;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    searchPlaceholder: import("vue-types").VueTypeValidableDef<any>;
    labelInValue: {
        type: BooleanConstructor;
        default: any;
    };
    fieldNames: {
        type: PropType<FieldNames>;
    };
    optionFilterProp: StringConstructor;
    defaultActiveFirstOption: {
        type: BooleanConstructor;
        default: any;
    };
    searchValue: StringConstructor;
    showSearch: {
        type: BooleanConstructor;
        default: any;
    };
    onInputKeyDown: {
        type: PropType<(e: KeyboardEvent) => void>;
    };
    removeIcon: import("vue-types").VueTypeValidableDef<any>;
    maxTagCount: {
        type: PropType<number | "responsive">;
    };
    maxTagTextLength: NumberConstructor;
    maxTagPlaceholder: {
        type: PropType<(omittedValues: import("../vc-tree-select/interface").LabelValueType[]) => any>;
    };
    tagRender: {
        type: PropType<(props: import("../vc-select/interface/generator").CustomTagProps) => any>;
    };
    choiceTransitionName: StringConstructor;
    dropdownStyle: {
        type: PropType<import("vue").CSSProperties>;
    };
    dropdownRender: {
        type: PropType<(menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => any>;
    };
    inputValue: StringConstructor;
    filterSort: {
        type: PropType<(optionA: import("../vc-tree-select/interface").DataNode, optionB: import("../vc-tree-select/interface").DataNode) => number>;
    };
    autoClearSearchValue: {
        type: BooleanConstructor;
        default: any;
    };
    showArrow: {
        type: BooleanConstructor;
        default: any;
    };
    listHeight: NumberConstructor;
    listItemHeight: NumberConstructor;
    onPopupScroll: {
        type: PropType<(e: UIEvent) => void>;
    };
    onDropdownVisibleChange: {
        type: PropType<(open: boolean) => void>;
    };
    internalProps: {
        type: PropType<{
            mark?: string;
            onClear?: import("../vc-select/interface/generator").OnClear;
            skipTriggerChange?: boolean;
            skipTriggerSelect?: boolean;
            onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
        }>;
        default: {
            mark?: string;
            onClear?: import("../vc-select/interface/generator").OnClear;
            skipTriggerChange?: boolean;
            skipTriggerSelect?: boolean;
            onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
        };
    };
    switcherIcon: import("vue-types").VueTypeValidableDef<any>;
    treeData: {
        type: PropType<import("../vc-tree-select/interface").DataNode[]>;
    };
    loadData: {
        type: PropType<(dataNode: import("../vc-tree-select/interface").LegacyDataNode) => Promise<unknown>>;
    };
    filterTreeNode: {
        type: PropType<boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>>;
        default: any;
    };
    treeCheckStrictly: {
        type: BooleanConstructor;
        default: any;
    };
    treeCheckable: {
        type: BooleanConstructor;
        default: any;
    };
    showCheckedStrategy: {
        type: PropType<import("../vc-tree-select/utils/strategyUtil").CheckedStrategy>;
    };
    treeNodeFilterProp: StringConstructor;
    treeNodeLabelProp: StringConstructor;
    treeDataSimpleMode: {
        type: PropType<boolean | import("../vc-tree-select/interface").SimpleModeConfig>;
        default: any;
    };
    treeExpandedKeys: {
        type: PropType<import("../_util/type").Key[]>;
    };
    treeDefaultExpandedKeys: {
        type: PropType<import("../_util/type").Key[]>;
    };
    treeLoadedKeys: {
        type: PropType<import("../_util/type").Key[]>;
    };
    treeDefaultExpandAll: {
        type: BooleanConstructor;
        default: any;
    };
    treeLine: {
        type: BooleanConstructor;
        default: any;
    };
    treeIcon: import("vue-types").VueTypeValidableDef<any>;
    dropdownPopupAlign: import("vue-types").VueTypeValidableDef<any>;
    onTreeExpand: {
        type: PropType<(expandedKeys: import("../_util/type").Key[]) => void>;
    };
    onTreeLoad: {
        type: PropType<(loadedKeys: import("../_util/type").Key[]) => void>;
    };
    labelRender: {
        type: PropType<(entity: import("../vc-tree-select/interface").FlattenDataNode) => any>;
    };
};
export declare type TreeSelectProps = Partial<ExtractPropTypes<typeof treeSelectProps>>;
export declare const TreeSelectNode: import("vue").FunctionalComponent<import("../vc-tree-select/TreeNode").TreeNodeProps, {}> & {
    isTreeSelectNode: boolean;
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            open: boolean;
            multiple: boolean;
            disabled: boolean;
            loading: boolean;
            virtual: boolean;
            dropdownMatchSelectWidth: number | boolean;
            allowClear: boolean;
            autofocus: boolean;
            defaultOpen: boolean;
            bordered: boolean;
            labelInValue: boolean;
            defaultActiveFirstOption: boolean;
            showSearch: boolean;
            autoClearSearchValue: boolean;
            showArrow: boolean;
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
            filterTreeNode: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
            treeCheckStrictly: boolean;
            treeCheckable: boolean;
            treeDataSimpleMode: any;
            treeDefaultExpandAll: boolean;
            treeLine: boolean;
        }> & Omit<Readonly<{
            suffixIcon?: unknown;
            size?: unknown;
            bordered?: unknown;
            replaceFields?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onKeydown?: unknown;
            onKeyup?: unknown;
            onClick?: unknown;
            onMousedown?: unknown;
            onMouseenter?: unknown;
            onMouseleave?: unknown;
            onSelect?: unknown;
            prefixCls?: unknown;
            direction?: unknown;
            open?: unknown;
            animation?: unknown;
            multiple?: unknown;
            disabled?: unknown;
            value?: unknown;
            tabindex?: unknown;
            onDeselect?: unknown;
            onClear?: unknown;
            loading?: unknown;
            getPopupContainer?: unknown;
            virtual?: unknown;
            dropdownMatchSelectWidth?: unknown;
            defaultValue?: unknown;
            transitionName?: unknown;
            showAction?: unknown;
            dropdownClassName?: unknown;
            placeholder?: unknown;
            allowClear?: unknown;
            autofocus?: unknown;
            defaultOpen?: unknown;
            id?: unknown;
            clearIcon?: unknown;
            options?: unknown;
            placement?: unknown;
            children?: unknown;
            onSearch?: unknown;
            notFoundContent?: unknown;
            searchPlaceholder?: unknown;
            labelInValue?: unknown;
            fieldNames?: unknown;
            optionFilterProp?: unknown;
            defaultActiveFirstOption?: unknown;
            searchValue?: unknown;
            showSearch?: unknown;
            onInputKeyDown?: unknown;
            removeIcon?: unknown;
            maxTagCount?: unknown;
            maxTagTextLength?: unknown;
            maxTagPlaceholder?: unknown;
            tagRender?: unknown;
            choiceTransitionName?: unknown;
            dropdownStyle?: unknown;
            dropdownRender?: unknown;
            inputValue?: unknown;
            filterSort?: unknown;
            autoClearSearchValue?: unknown;
            showArrow?: unknown;
            listHeight?: unknown;
            listItemHeight?: unknown;
            onPopupScroll?: unknown;
            onDropdownVisibleChange?: unknown;
            internalProps?: unknown;
            switcherIcon?: unknown;
            treeData?: unknown;
            loadData?: unknown;
            filterTreeNode?: unknown;
            treeCheckStrictly?: unknown;
            treeCheckable?: unknown;
            showCheckedStrategy?: unknown;
            treeNodeFilterProp?: unknown;
            treeNodeLabelProp?: unknown;
            treeDataSimpleMode?: unknown;
            treeExpandedKeys?: unknown;
            treeDefaultExpandedKeys?: unknown;
            treeLoadedKeys?: unknown;
            treeDefaultExpandAll?: unknown;
            treeLine?: unknown;
            treeIcon?: unknown;
            dropdownPopupAlign?: unknown;
            onTreeExpand?: unknown;
            onTreeLoad?: unknown;
            labelRender?: unknown;
        } & {
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
        } & {
            onFocus?: (e: FocusEvent) => void;
            onBlur?: (e: FocusEvent) => void;
            onChange?: (value: DefaultValueType, labelList: any[], extra: import("../vc-tree-select/interface").ChangeEventExtra) => void;
            onKeydown?: (e: KeyboardEvent) => void;
            onKeyup?: (e: KeyboardEvent) => void;
            onClick?: (e: MouseEvent) => void;
            onMousedown?: (e: MouseEvent) => void;
            onMouseenter?: (e: MouseEvent) => void;
            onMouseleave?: (e: MouseEvent) => void;
            onSelect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
            prefixCls?: string;
            size?: SizeType;
            direction?: "ltr" | "rtl";
            open?: boolean;
            animation?: string;
            multiple?: boolean;
            disabled?: boolean;
            value?: unknown;
            tabindex?: string | number;
            onDeselect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
            onClear?: import("../vc-select/interface/generator").OnClear;
            loading?: boolean;
            getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
            virtual?: boolean;
            dropdownMatchSelectWidth?: number | boolean;
            defaultValue?: unknown;
            transitionName?: string;
            showAction?: ("click" | "focus")[];
            dropdownClassName?: string;
            placeholder?: any;
            allowClear?: boolean;
            autofocus?: boolean;
            defaultOpen?: boolean;
            id?: string;
            suffixIcon?: any;
            clearIcon?: any;
            bordered?: boolean;
            options?: import("../vc-tree-select/interface").DataNode[];
            placement?: import("../vc-select/generate").Placement;
            children?: unknown[];
            onSearch?: (value: string) => void;
            notFoundContent?: any;
            searchPlaceholder?: any;
            labelInValue?: boolean;
            fieldNames?: unknown;
            optionFilterProp?: string;
            defaultActiveFirstOption?: boolean;
            searchValue?: string;
            showSearch?: boolean;
            onInputKeyDown?: (e: KeyboardEvent) => void;
            removeIcon?: any;
            maxTagCount?: number | "responsive";
            maxTagTextLength?: number;
            maxTagPlaceholder?: (omittedValues: import("../vc-tree-select/interface").LabelValueType[]) => any;
            tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
            choiceTransitionName?: string;
            dropdownStyle?: unknown;
            dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => any;
            inputValue?: string;
            filterSort?: (optionA: import("../vc-tree-select/interface").DataNode, optionB: import("../vc-tree-select/interface").DataNode) => number;
            autoClearSearchValue?: boolean;
            showArrow?: boolean;
            listHeight?: number;
            listItemHeight?: number;
            onPopupScroll?: (e: UIEvent) => void;
            onDropdownVisibleChange?: (open: boolean) => void;
            switcherIcon?: any;
            treeData?: import("../vc-tree-select/interface").DataNode[];
            loadData?: (dataNode: import("../vc-tree-select/interface").LegacyDataNode) => Promise<unknown>;
            filterTreeNode?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
            replaceFields?: unknown;
            treeCheckStrictly?: boolean;
            treeCheckable?: boolean;
            showCheckedStrategy?: import("../vc-tree-select/utils/strategyUtil").CheckedStrategy;
            treeNodeFilterProp?: string;
            treeNodeLabelProp?: string;
            treeDataSimpleMode?: any;
            treeExpandedKeys?: import("../_util/type").Key[];
            treeDefaultExpandedKeys?: import("../_util/type").Key[];
            treeLoadedKeys?: import("../_util/type").Key[];
            treeDefaultExpandAll?: boolean;
            treeLine?: boolean;
            treeIcon?: any;
            dropdownPopupAlign?: any;
            onTreeExpand?: (expandedKeys: import("../_util/type").Key[]) => void;
            onTreeLoad?: (loadedKeys: import("../_util/type").Key[]) => void;
            labelRender?: (entity: import("../vc-tree-select/interface").FlattenDataNode) => any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "open" | "multiple" | "disabled" | "loading" | "virtual" | "dropdownMatchSelectWidth" | "allowClear" | "autofocus" | "defaultOpen" | "bordered" | "labelInValue" | "defaultActiveFirstOption" | "showSearch" | "autoClearSearchValue" | "showArrow" | "internalProps" | "filterTreeNode" | "treeCheckStrictly" | "treeCheckable" | "treeDataSimpleMode" | "treeDefaultExpandAll" | "treeLine">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            suffixIcon?: unknown;
            size?: unknown;
            bordered?: unknown;
            replaceFields?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onKeydown?: unknown;
            onKeyup?: unknown;
            onClick?: unknown;
            onMousedown?: unknown;
            onMouseenter?: unknown;
            onMouseleave?: unknown;
            onSelect?: unknown;
            prefixCls?: unknown;
            direction?: unknown;
            open?: unknown;
            animation?: unknown;
            multiple?: unknown;
            disabled?: unknown;
            value?: unknown;
            tabindex?: unknown;
            onDeselect?: unknown;
            onClear?: unknown;
            loading?: unknown;
            getPopupContainer?: unknown;
            virtual?: unknown;
            dropdownMatchSelectWidth?: unknown;
            defaultValue?: unknown;
            transitionName?: unknown;
            showAction?: unknown;
            dropdownClassName?: unknown;
            placeholder?: unknown;
            allowClear?: unknown;
            autofocus?: unknown;
            defaultOpen?: unknown;
            id?: unknown;
            clearIcon?: unknown;
            options?: unknown;
            placement?: unknown;
            children?: unknown;
            onSearch?: unknown;
            notFoundContent?: unknown;
            searchPlaceholder?: unknown;
            labelInValue?: unknown;
            fieldNames?: unknown;
            optionFilterProp?: unknown;
            defaultActiveFirstOption?: unknown;
            searchValue?: unknown;
            showSearch?: unknown;
            onInputKeyDown?: unknown;
            removeIcon?: unknown;
            maxTagCount?: unknown;
            maxTagTextLength?: unknown;
            maxTagPlaceholder?: unknown;
            tagRender?: unknown;
            choiceTransitionName?: unknown;
            dropdownStyle?: unknown;
            dropdownRender?: unknown;
            inputValue?: unknown;
            filterSort?: unknown;
            autoClearSearchValue?: unknown;
            showArrow?: unknown;
            listHeight?: unknown;
            listItemHeight?: unknown;
            onPopupScroll?: unknown;
            onDropdownVisibleChange?: unknown;
            internalProps?: unknown;
            switcherIcon?: unknown;
            treeData?: unknown;
            loadData?: unknown;
            filterTreeNode?: unknown;
            treeCheckStrictly?: unknown;
            treeCheckable?: unknown;
            showCheckedStrategy?: unknown;
            treeNodeFilterProp?: unknown;
            treeNodeLabelProp?: unknown;
            treeDataSimpleMode?: unknown;
            treeExpandedKeys?: unknown;
            treeDefaultExpandedKeys?: unknown;
            treeLoadedKeys?: unknown;
            treeDefaultExpandAll?: unknown;
            treeLine?: unknown;
            treeIcon?: unknown;
            dropdownPopupAlign?: unknown;
            onTreeExpand?: unknown;
            onTreeLoad?: unknown;
            labelRender?: unknown;
        } & {
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
        } & {
            onFocus?: (e: FocusEvent) => void;
            onBlur?: (e: FocusEvent) => void;
            onChange?: (value: DefaultValueType, labelList: any[], extra: import("../vc-tree-select/interface").ChangeEventExtra) => void;
            onKeydown?: (e: KeyboardEvent) => void;
            onKeyup?: (e: KeyboardEvent) => void;
            onClick?: (e: MouseEvent) => void;
            onMousedown?: (e: MouseEvent) => void;
            onMouseenter?: (e: MouseEvent) => void;
            onMouseleave?: (e: MouseEvent) => void;
            onSelect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
            prefixCls?: string;
            size?: SizeType;
            direction?: "ltr" | "rtl";
            open?: boolean;
            animation?: string;
            multiple?: boolean;
            disabled?: boolean;
            value?: unknown;
            tabindex?: string | number;
            onDeselect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
            onClear?: import("../vc-select/interface/generator").OnClear;
            loading?: boolean;
            getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
            virtual?: boolean;
            dropdownMatchSelectWidth?: number | boolean;
            defaultValue?: unknown;
            transitionName?: string;
            showAction?: ("click" | "focus")[];
            dropdownClassName?: string;
            placeholder?: any;
            allowClear?: boolean;
            autofocus?: boolean;
            defaultOpen?: boolean;
            id?: string;
            suffixIcon?: any;
            clearIcon?: any;
            bordered?: boolean;
            options?: import("../vc-tree-select/interface").DataNode[];
            placement?: import("../vc-select/generate").Placement;
            children?: unknown[];
            onSearch?: (value: string) => void;
            notFoundContent?: any;
            searchPlaceholder?: any;
            labelInValue?: boolean;
            fieldNames?: unknown;
            optionFilterProp?: string;
            defaultActiveFirstOption?: boolean;
            searchValue?: string;
            showSearch?: boolean;
            onInputKeyDown?: (e: KeyboardEvent) => void;
            removeIcon?: any;
            maxTagCount?: number | "responsive";
            maxTagTextLength?: number;
            maxTagPlaceholder?: (omittedValues: import("../vc-tree-select/interface").LabelValueType[]) => any;
            tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
            choiceTransitionName?: string;
            dropdownStyle?: unknown;
            dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => any;
            inputValue?: string;
            filterSort?: (optionA: import("../vc-tree-select/interface").DataNode, optionB: import("../vc-tree-select/interface").DataNode) => number;
            autoClearSearchValue?: boolean;
            showArrow?: boolean;
            listHeight?: number;
            listItemHeight?: number;
            onPopupScroll?: (e: UIEvent) => void;
            onDropdownVisibleChange?: (open: boolean) => void;
            switcherIcon?: any;
            treeData?: import("../vc-tree-select/interface").DataNode[];
            loadData?: (dataNode: import("../vc-tree-select/interface").LegacyDataNode) => Promise<unknown>;
            filterTreeNode?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
            replaceFields?: unknown;
            treeCheckStrictly?: boolean;
            treeCheckable?: boolean;
            showCheckedStrategy?: import("../vc-tree-select/utils/strategyUtil").CheckedStrategy;
            treeNodeFilterProp?: string;
            treeNodeLabelProp?: string;
            treeDataSimpleMode?: any;
            treeExpandedKeys?: import("../_util/type").Key[];
            treeDefaultExpandedKeys?: import("../_util/type").Key[];
            treeLoadedKeys?: import("../_util/type").Key[];
            treeDefaultExpandAll?: boolean;
            treeLine?: boolean;
            treeIcon?: any;
            dropdownPopupAlign?: any;
            onTreeExpand?: (expandedKeys: import("../_util/type").Key[]) => void;
            onTreeLoad?: (loadedKeys: import("../_util/type").Key[]) => void;
            labelRender?: (entity: import("../vc-tree-select/interface").FlattenDataNode) => any;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            open: boolean;
            multiple: boolean;
            disabled: boolean;
            loading: boolean;
            virtual: boolean;
            dropdownMatchSelectWidth: number | boolean;
            allowClear: boolean;
            autofocus: boolean;
            defaultOpen: boolean;
            bordered: boolean;
            labelInValue: boolean;
            defaultActiveFirstOption: boolean;
            showSearch: boolean;
            autoClearSearchValue: boolean;
            showArrow: boolean;
            internalProps: {
                mark?: string;
                onClear?: import("../vc-select/interface/generator").OnClear;
                skipTriggerChange?: boolean;
                skipTriggerSelect?: boolean;
                onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
                onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            };
            filterTreeNode: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
            treeCheckStrictly: boolean;
            treeCheckable: boolean;
            treeDataSimpleMode: any;
            treeDefaultExpandAll: boolean;
            treeLine: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        suffixIcon?: unknown;
        size?: unknown;
        bordered?: unknown;
        replaceFields?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
        onChange?: unknown;
        onKeydown?: unknown;
        onKeyup?: unknown;
        onClick?: unknown;
        onMousedown?: unknown;
        onMouseenter?: unknown;
        onMouseleave?: unknown;
        onSelect?: unknown;
        prefixCls?: unknown;
        direction?: unknown;
        open?: unknown;
        animation?: unknown;
        multiple?: unknown;
        disabled?: unknown;
        value?: unknown;
        tabindex?: unknown;
        onDeselect?: unknown;
        onClear?: unknown;
        loading?: unknown;
        getPopupContainer?: unknown;
        virtual?: unknown;
        dropdownMatchSelectWidth?: unknown;
        defaultValue?: unknown;
        transitionName?: unknown;
        showAction?: unknown;
        dropdownClassName?: unknown;
        placeholder?: unknown;
        allowClear?: unknown;
        autofocus?: unknown;
        defaultOpen?: unknown;
        id?: unknown;
        clearIcon?: unknown;
        options?: unknown;
        placement?: unknown;
        children?: unknown;
        onSearch?: unknown;
        notFoundContent?: unknown;
        searchPlaceholder?: unknown;
        labelInValue?: unknown;
        fieldNames?: unknown;
        optionFilterProp?: unknown;
        defaultActiveFirstOption?: unknown;
        searchValue?: unknown;
        showSearch?: unknown;
        onInputKeyDown?: unknown;
        removeIcon?: unknown;
        maxTagCount?: unknown;
        maxTagTextLength?: unknown;
        maxTagPlaceholder?: unknown;
        tagRender?: unknown;
        choiceTransitionName?: unknown;
        dropdownStyle?: unknown;
        dropdownRender?: unknown;
        inputValue?: unknown;
        filterSort?: unknown;
        autoClearSearchValue?: unknown;
        showArrow?: unknown;
        listHeight?: unknown;
        listItemHeight?: unknown;
        onPopupScroll?: unknown;
        onDropdownVisibleChange?: unknown;
        internalProps?: unknown;
        switcherIcon?: unknown;
        treeData?: unknown;
        loadData?: unknown;
        filterTreeNode?: unknown;
        treeCheckStrictly?: unknown;
        treeCheckable?: unknown;
        showCheckedStrategy?: unknown;
        treeNodeFilterProp?: unknown;
        treeNodeLabelProp?: unknown;
        treeDataSimpleMode?: unknown;
        treeExpandedKeys?: unknown;
        treeDefaultExpandedKeys?: unknown;
        treeLoadedKeys?: unknown;
        treeDefaultExpandAll?: unknown;
        treeLine?: unknown;
        treeIcon?: unknown;
        dropdownPopupAlign?: unknown;
        onTreeExpand?: unknown;
        onTreeLoad?: unknown;
        labelRender?: unknown;
    } & {
        internalProps: {
            mark?: string;
            onClear?: import("../vc-select/interface/generator").OnClear;
            skipTriggerChange?: boolean;
            skipTriggerSelect?: boolean;
            onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
            onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
        };
    } & {
        onFocus?: (e: FocusEvent) => void;
        onBlur?: (e: FocusEvent) => void;
        onChange?: (value: DefaultValueType, labelList: any[], extra: import("../vc-tree-select/interface").ChangeEventExtra) => void;
        onKeydown?: (e: KeyboardEvent) => void;
        onKeyup?: (e: KeyboardEvent) => void;
        onClick?: (e: MouseEvent) => void;
        onMousedown?: (e: MouseEvent) => void;
        onMouseenter?: (e: MouseEvent) => void;
        onMouseleave?: (e: MouseEvent) => void;
        onSelect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
        prefixCls?: string;
        size?: SizeType;
        direction?: "ltr" | "rtl";
        open?: boolean;
        animation?: string;
        multiple?: boolean;
        disabled?: boolean;
        value?: unknown;
        tabindex?: string | number;
        onDeselect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
        onClear?: import("../vc-select/interface/generator").OnClear;
        loading?: boolean;
        getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
        virtual?: boolean;
        dropdownMatchSelectWidth?: number | boolean;
        defaultValue?: unknown;
        transitionName?: string;
        showAction?: ("click" | "focus")[];
        dropdownClassName?: string;
        placeholder?: any;
        allowClear?: boolean;
        autofocus?: boolean;
        defaultOpen?: boolean;
        id?: string;
        suffixIcon?: any;
        clearIcon?: any;
        bordered?: boolean;
        options?: import("../vc-tree-select/interface").DataNode[];
        placement?: import("../vc-select/generate").Placement;
        children?: unknown[];
        onSearch?: (value: string) => void;
        notFoundContent?: any;
        searchPlaceholder?: any;
        labelInValue?: boolean;
        fieldNames?: unknown;
        optionFilterProp?: string;
        defaultActiveFirstOption?: boolean;
        searchValue?: string;
        showSearch?: boolean;
        onInputKeyDown?: (e: KeyboardEvent) => void;
        removeIcon?: any;
        maxTagCount?: number | "responsive";
        maxTagTextLength?: number;
        maxTagPlaceholder?: (omittedValues: import("../vc-tree-select/interface").LabelValueType[]) => any;
        tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
        choiceTransitionName?: string;
        dropdownStyle?: unknown;
        dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => any;
        inputValue?: string;
        filterSort?: (optionA: import("../vc-tree-select/interface").DataNode, optionB: import("../vc-tree-select/interface").DataNode) => number;
        autoClearSearchValue?: boolean;
        showArrow?: boolean;
        listHeight?: number;
        listItemHeight?: number;
        onPopupScroll?: (e: UIEvent) => void;
        onDropdownVisibleChange?: (open: boolean) => void;
        switcherIcon?: any;
        treeData?: import("../vc-tree-select/interface").DataNode[];
        loadData?: (dataNode: import("../vc-tree-select/interface").LegacyDataNode) => Promise<unknown>;
        filterTreeNode?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
        replaceFields?: unknown;
        treeCheckStrictly?: boolean;
        treeCheckable?: boolean;
        showCheckedStrategy?: import("../vc-tree-select/utils/strategyUtil").CheckedStrategy;
        treeNodeFilterProp?: string;
        treeNodeLabelProp?: string;
        treeDataSimpleMode?: any;
        treeExpandedKeys?: import("../_util/type").Key[];
        treeDefaultExpandedKeys?: import("../_util/type").Key[];
        treeLoadedKeys?: import("../_util/type").Key[];
        treeDefaultExpandAll?: boolean;
        treeLine?: boolean;
        treeIcon?: any;
        dropdownPopupAlign?: any;
        onTreeExpand?: (expandedKeys: import("../_util/type").Key[]) => void;
        onTreeLoad?: (loadedKeys: import("../_util/type").Key[]) => void;
        labelRender?: (entity: import("../vc-tree-select/interface").FlattenDataNode) => any;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    suffixIcon?: unknown;
    size?: unknown;
    bordered?: unknown;
    replaceFields?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    onChange?: unknown;
    onKeydown?: unknown;
    onKeyup?: unknown;
    onClick?: unknown;
    onMousedown?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
    onSelect?: unknown;
    prefixCls?: unknown;
    direction?: unknown;
    open?: unknown;
    animation?: unknown;
    multiple?: unknown;
    disabled?: unknown;
    value?: unknown;
    tabindex?: unknown;
    onDeselect?: unknown;
    onClear?: unknown;
    loading?: unknown;
    getPopupContainer?: unknown;
    virtual?: unknown;
    dropdownMatchSelectWidth?: unknown;
    defaultValue?: unknown;
    transitionName?: unknown;
    showAction?: unknown;
    dropdownClassName?: unknown;
    placeholder?: unknown;
    allowClear?: unknown;
    autofocus?: unknown;
    defaultOpen?: unknown;
    id?: unknown;
    clearIcon?: unknown;
    options?: unknown;
    placement?: unknown;
    children?: unknown;
    onSearch?: unknown;
    notFoundContent?: unknown;
    searchPlaceholder?: unknown;
    labelInValue?: unknown;
    fieldNames?: unknown;
    optionFilterProp?: unknown;
    defaultActiveFirstOption?: unknown;
    searchValue?: unknown;
    showSearch?: unknown;
    onInputKeyDown?: unknown;
    removeIcon?: unknown;
    maxTagCount?: unknown;
    maxTagTextLength?: unknown;
    maxTagPlaceholder?: unknown;
    tagRender?: unknown;
    choiceTransitionName?: unknown;
    dropdownStyle?: unknown;
    dropdownRender?: unknown;
    inputValue?: unknown;
    filterSort?: unknown;
    autoClearSearchValue?: unknown;
    showArrow?: unknown;
    listHeight?: unknown;
    listItemHeight?: unknown;
    onPopupScroll?: unknown;
    onDropdownVisibleChange?: unknown;
    internalProps?: unknown;
    switcherIcon?: unknown;
    treeData?: unknown;
    loadData?: unknown;
    filterTreeNode?: unknown;
    treeCheckStrictly?: unknown;
    treeCheckable?: unknown;
    showCheckedStrategy?: unknown;
    treeNodeFilterProp?: unknown;
    treeNodeLabelProp?: unknown;
    treeDataSimpleMode?: unknown;
    treeExpandedKeys?: unknown;
    treeDefaultExpandedKeys?: unknown;
    treeLoadedKeys?: unknown;
    treeDefaultExpandAll?: unknown;
    treeLine?: unknown;
    treeIcon?: unknown;
    dropdownPopupAlign?: unknown;
    onTreeExpand?: unknown;
    onTreeLoad?: unknown;
    labelRender?: unknown;
} & {
    internalProps: {
        mark?: string;
        onClear?: import("../vc-select/interface/generator").OnClear;
        skipTriggerChange?: boolean;
        skipTriggerSelect?: boolean;
        onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
        onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
    };
} & {
    onFocus?: (e: FocusEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onChange?: (value: DefaultValueType, labelList: any[], extra: import("../vc-tree-select/interface").ChangeEventExtra) => void;
    onKeydown?: (e: KeyboardEvent) => void;
    onKeyup?: (e: KeyboardEvent) => void;
    onClick?: (e: MouseEvent) => void;
    onMousedown?: (e: MouseEvent) => void;
    onMouseenter?: (e: MouseEvent) => void;
    onMouseleave?: (e: MouseEvent) => void;
    onSelect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
    prefixCls?: string;
    size?: SizeType;
    direction?: "ltr" | "rtl";
    open?: boolean;
    animation?: string;
    multiple?: boolean;
    disabled?: boolean;
    value?: unknown;
    tabindex?: string | number;
    onDeselect?: (value: import("../vc-tree-select/interface").RawValueType | import("../vc-tree-select/interface").LabelValueType, option: import("../vc-tree-select/interface").DataNode) => void;
    onClear?: import("../vc-select/interface/generator").OnClear;
    loading?: boolean;
    getPopupContainer?: import("../vc-select/interface").RenderDOMFunc;
    virtual?: boolean;
    dropdownMatchSelectWidth?: number | boolean;
    defaultValue?: unknown;
    transitionName?: string;
    showAction?: ("click" | "focus")[];
    dropdownClassName?: string;
    placeholder?: any;
    allowClear?: boolean;
    autofocus?: boolean;
    defaultOpen?: boolean;
    id?: string;
    suffixIcon?: any;
    clearIcon?: any;
    bordered?: boolean;
    options?: import("../vc-tree-select/interface").DataNode[];
    placement?: import("../vc-select/generate").Placement;
    children?: unknown[];
    onSearch?: (value: string) => void;
    notFoundContent?: any;
    searchPlaceholder?: any;
    labelInValue?: boolean;
    fieldNames?: unknown;
    optionFilterProp?: string;
    defaultActiveFirstOption?: boolean;
    searchValue?: string;
    showSearch?: boolean;
    onInputKeyDown?: (e: KeyboardEvent) => void;
    removeIcon?: any;
    maxTagCount?: number | "responsive";
    maxTagTextLength?: number;
    maxTagPlaceholder?: (omittedValues: import("../vc-tree-select/interface").LabelValueType[]) => any;
    tagRender?: (props: import("../vc-select/interface/generator").CustomTagProps) => any;
    choiceTransitionName?: string;
    dropdownStyle?: unknown;
    dropdownRender?: (menu: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) => any;
    inputValue?: string;
    filterSort?: (optionA: import("../vc-tree-select/interface").DataNode, optionB: import("../vc-tree-select/interface").DataNode) => number;
    autoClearSearchValue?: boolean;
    showArrow?: boolean;
    listHeight?: number;
    listItemHeight?: number;
    onPopupScroll?: (e: UIEvent) => void;
    onDropdownVisibleChange?: (open: boolean) => void;
    switcherIcon?: any;
    treeData?: import("../vc-tree-select/interface").DataNode[];
    loadData?: (dataNode: import("../vc-tree-select/interface").LegacyDataNode) => Promise<unknown>;
    filterTreeNode?: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
    replaceFields?: unknown;
    treeCheckStrictly?: boolean;
    treeCheckable?: boolean;
    showCheckedStrategy?: import("../vc-tree-select/utils/strategyUtil").CheckedStrategy;
    treeNodeFilterProp?: string;
    treeNodeLabelProp?: string;
    treeDataSimpleMode?: any;
    treeExpandedKeys?: import("../_util/type").Key[];
    treeDefaultExpandedKeys?: import("../_util/type").Key[];
    treeLoadedKeys?: import("../_util/type").Key[];
    treeDefaultExpandAll?: boolean;
    treeLine?: boolean;
    treeIcon?: any;
    dropdownPopupAlign?: any;
    onTreeExpand?: (expandedKeys: import("../_util/type").Key[]) => void;
    onTreeLoad?: (loadedKeys: import("../_util/type").Key[]) => void;
    labelRender?: (entity: import("../vc-tree-select/interface").FlattenDataNode) => any;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    open: boolean;
    multiple: boolean;
    disabled: boolean;
    loading: boolean;
    virtual: boolean;
    dropdownMatchSelectWidth: number | boolean;
    allowClear: boolean;
    autofocus: boolean;
    defaultOpen: boolean;
    bordered: boolean;
    labelInValue: boolean;
    defaultActiveFirstOption: boolean;
    showSearch: boolean;
    autoClearSearchValue: boolean;
    showArrow: boolean;
    internalProps: {
        mark?: string;
        onClear?: import("../vc-select/interface/generator").OnClear;
        skipTriggerChange?: boolean;
        skipTriggerSelect?: boolean;
        onRawSelect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
        onRawDeselect?: (value: import("../vc-select/interface/generator").RawValueType, option: import("../vc-tree-select/interface").DataNode, source: import("../vc-select/interface/generator").SelectSource) => void;
    };
    filterTreeNode: boolean | import("../vc-select/interface/generator").FilterFunc<import("../vc-tree-select/interface").LegacyDataNode>;
    treeCheckStrictly: boolean;
    treeCheckable: boolean;
    treeDataSimpleMode: any;
    treeDefaultExpandAll: boolean;
    treeLine: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    TreeNode: import("vue").FunctionalComponent<import("../vc-tree-select/TreeNode").TreeNodeProps, {}> & {
        isTreeSelectNode: boolean;
    };
    SHOW_ALL: string;
    SHOW_PARENT: string;
    SHOW_CHILD: string;
    install: (app: App) => App<any>;
};
export default _default;
