{"version":3,"file":"index.mjs","sources":["../../../../../packages/hooks/use-global-config/index.ts"],"sourcesContent":["import { inject, ref, toRef } from 'vue'\nimport { configProviderContextKey } from '@element-plus/tokens'\nimport { hasOwn, isObject } from '@element-plus/utils/util'\nimport type { Ref } from 'vue'\nimport type { ConfigProviderContext } from '@element-plus/tokens'\n\nexport function useGlobalConfig<K extends keyof ConfigProviderContext>(\n  key: K\n): Ref<ConfigProviderContext[K]>\nexport function useGlobalConfig(): ConfigProviderContext\nexport function useGlobalConfig(key?: keyof ConfigProviderContext) {\n  const config = inject(configProviderContextKey, {})\n  if (key) {\n    return isObject(config) && hasOwn(config, key)\n      ? toRef(config, key)\n      : ref(undefined)\n  } else {\n    return config\n  }\n}\n"],"names":[],"mappings":";;;;;;AAGO,SAAS,eAAe,CAAC,GAAG,EAAE;AACrC,EAAE,MAAM,MAAM,GAAG,MAAM,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;AACtD,EAAE,IAAI,GAAG,EAAE;AACX,IAAI,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACtF,GAAG,MAAM;AACT,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;;;;"}