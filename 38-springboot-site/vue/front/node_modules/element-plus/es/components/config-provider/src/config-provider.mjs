import { defineComponent, provide, watch } from 'vue';
import { buildProps, definePropType } from '../../../utils/props.mjs';
import '../../../hooks/index.mjs';
import '../../../tokens/index.mjs';
import { PopupManager } from '../../../utils/popup-manager.mjs';
import { isNumber } from '../../../utils/util.mjs';
import { useLocaleProps, provideLocale } from '../../../hooks/use-locale/index.mjs';
import { configProviderContextKey } from '../../../tokens/config-provider.mjs';

const configProviderProps = buildProps({
  ...useLocaleProps,
  size: {
    type: String,
    values: ["large", "default", "small"]
  },
  button: {
    type: definePropType(Object)
  },
  zIndex: {
    type: Number
  }
});
var ConfigProvider = defineComponent({
  name: "ElConfigProvider",
  props: configProviderProps,
  setup(props, { slots }) {
    provideLocale();
    provide(configProviderContextKey, props);
    watch(() => props.zIndex, () => {
      if (isNumber(props.zIndex))
        PopupManager.globalInitialZIndex = props.zIndex;
    }, { immediate: true });
    return () => {
      var _a;
      return (_a = slots.default) == null ? void 0 : _a.call(slots);
    };
  }
});

export { configProviderProps, ConfigProvider as default };
//# sourceMappingURL=config-provider.mjs.map
